"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3879],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8372:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={id:"testing",title:"Testing"},u=void 0,c={unversionedId:"features/routing/testing",id:"features/routing/testing",title:"Testing",description:"Testing ROUTERGUARDTOKEN extensions",source:"@site/tmp-docs/03-features/07-routing/10-testing.md",sourceDirName:"03-features/07-routing",slug:"/features/routing/testing",permalink:"/docs/features/routing/testing",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/03-features/07-routing/10-testing.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"testing",title:"Testing"},sidebar:"sidebar",previous:{title:"How-to",permalink:"/docs/features/routing/how-to"},next:{title:"State Management",permalink:"/docs/features/state-management"}},l={},p=[{value:"Testing ROUTER_GUARD_TOKEN extensions",id:"testing-router_guard_token-extensions",level:4}],d={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"testing-router_guard_token-extensions"},"Testing ROUTER_GUARD_TOKEN extensions"),(0,i.kt)("p",null,"If you have a module or providers that define ",(0,i.kt)("inlineCode",{parentName:"p"},"ROUTER_GUARD_TOKEN"),", then it will be convenient to use special utilities to test them separately"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ROUTER_GUARD_TOKEN } from '@tramvai/tokens-router';\nimport { testGuard } from '@tramvai/module-router/tests';\nimport { CustomModule } from './module';\nimport { providers } from './providers';\n\ndescribe('router guards', () => {\n  it('should redirect from guard', async () => {\n    const { router } = testGuard({\n      providers,\n    });\n\n    await router.navigate('/test/');\n\n    expect(router.getCurrentUrl()).toMatchObject({\n      path: '/redirect/',\n    });\n  });\n\n  it('should block navigation', async () => {\n    const { router } = testGuard({\n      modules: [CustomModule],\n    });\n\n    expect(router.getCurrentUrl()).toMatchObject({ path: '/' });\n\n    await router.navigate('/test/').catch(() => null);\n\n    expect(router.getCurrentUrl()).toMatchObject({\n      path: '/',\n    });\n  });\n});\n")))}m.isMDXComponent=!0}}]);