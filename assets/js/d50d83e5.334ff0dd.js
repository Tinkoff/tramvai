"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9711],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),m=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=m(e.components);return o.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=m(t),g=a,f=u["".concat(i,".").concat(g)]||u[g]||c[g]||r;return t?o.createElement(f,s(s({ref:n},l),{},{components:t})):o.createElement(f,s({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var m=2;m<r;m++)s[m]=t[m];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8858:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>p,metadata:()=>m,toc:()=>c});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),s=["components"],p={id:"file-system-pages",title:"File-System Pages",sidebar_position:2},i=void 0,m={unversionedId:"features/routing/file-system-pages",id:"features/routing/file-system-pages",title:"File-System Pages",description:"Actual documentation",source:"@site/tmp-docs/features/routing/file-system-pages.md",sourceDirName:"features/routing",slug:"/features/routing/file-system-pages",permalink:"/docs/features/routing/file-system-pages",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/features/routing/file-system-pages.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"file-system-pages",title:"File-System Pages",sidebar_position:2},sidebar:"sidebar",previous:{title:"Versioning",permalink:"/docs/concepts/versioning"},next:{title:"Papi introducton",permalink:"/docs/features/papi/introduction"}},l={},c=[{value:"SEO and Meta Tags",id:"seo-and-meta-tags",level:2},{value:"Migration",id:"migration",level:2}],u={toc:c};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/features/pages#file-system-routing"},"Actual documentation")),(0,r.kt)("h2",{id:"seo-and-meta-tags"},"SEO and Meta Tags"),(0,r.kt)("p",null,"All possibilites below provided by ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/modules/seo"},"SeoModule")),(0,r.kt)("p",null,"Easy way to change page meta is to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"seo")," property to page component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { PageComponent } from '@tramvai/react';\n\nconst CommentsPage: PageComponent = () => <h1>Comments</h1>;\n\nCommentsPage.seo = {\n  metaTags: {\n    title: 'Comments Page Title',\n  },\n};\n\nexport default CommentsPage;\n")),(0,r.kt)("p",null,"Another way, for File-System Pages, is to update route ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const route = {\n  name: 'comments',\n  path: '/comments/',\n  config: {\n    pageComponent: '@/pages/comments',\n    seo: {\n      metaTags: {\n        title: 'Comments Page Title',\n      },\n    },\n  },\n}\n")),(0,r.kt)("p",null,"For complex cases you can use page actions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { declareAction } from '@tramvai/core';\nimport { PageComponent } from '@tramvai/react';\nimport { META_WALK_TOKEN, META_PRIORITY_APP } from '@tramvai/module-seo';\n\nconst metaAction = declareAction({\n  name: 'meta',\n  fn() {\n    this.deps.meta.updateMeta(META_PRIORITY_APP, {\n      title: 'Comments Page Title',\n    });\n  },\n  deps: {\n    meta: META_WALK_TOKEN,\n  },\n  conditions: {\n    always: true,\n  },\n});\n\nconst CommentsPage: PageComponent = () => <h1>Comments</h1>;\n\nCommentsPage.actions = [metaAction];\n\nexport default CommentsPage;\n")),(0,r.kt)("h2",{id:"migration"},"Migration"),(0,r.kt)("p",null,"If you want to migrate from bundles to file-system pages, there is few steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enable ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPages.enable")," option in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json"),", and change default folders for safety:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "fileSystemPages": {\n    "enable": true,\n    "pagesDir": "new-fs-pages", // file-system pages directory\n    "routesDir": false // force disable file-system routing\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Split your bundles to components"),(0,r.kt)("p",{parentName:"li"},"from this bundle ",(0,r.kt)("inlineCode",{parentName:"p"},"src/bundles/someBundle.ts"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createBundle } from '@tramvai/core';\nimport { lazy } from '@tramvai/react';\nimport { actionFoo, actionBar } from '../actions';\nimport { StoreFoo, StoreBar } from '../reducers';\nimport { CommonComponent } from '../components';\n\nconst someBundle = createBundle({\n  name: 'someBundle',\n  components: {\n    'pages/foo-page': lazy(() => import('../pages/Foo')),\n    'pages/bar-page': lazy(() => import('../pages/Bar')),\n    'components/common': CommonComponent,\n  },\n  actions: [actionFoo, actionBar],\n  reducers: [StoreFoo, StoreBar],\n});\n\nexport default someBundle;\n")),(0,r.kt)("p",{parentName:"li"},"you need to create two page components, ",(0,r.kt)("inlineCode",{parentName:"p"},"src/new-fs-pages/foo.tsx")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"src/new-fs-pages/bar.tsx"),", with this content:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { lazy, PageComponent } from '@tramvai/react';\nimport { actionFoo, actionBar } from '../actions';\nimport { StoreFoo, StoreBar } from '../reducers';\nimport { CommonComponent } from '../components';\n\n// the same for src/new-fs-pages/bar.tsx\nconst FooPage: PageComponent = () => {\n  return <h1>Foo Page</h1>;\n}\n\nFooPage.components = {\n    'components/common': CommonComponent,\n};\nFooPage.actions = [actionFoo, actionBar];\nFooPage.reducers = [StoreFoo, StoreBar];\n\nexport default FooPage;\n")),(0,r.kt)("p",{parentName:"li"},"then update your routes config from:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const routes = [\n    {\n        name: 'foo',\n        path: '/foo/',\n        config: {\n            bundle: 'sameBundle',\n            pageComponent: 'pages/foo-page',\n        },\n    },\n    {\n        name: 'bar',\n        path: '/bar/',\n        config: {\n            bundle: 'sameBundle',\n            pageComponent: 'pages/bar-page',\n        },\n    },\n]\n")),(0,r.kt)("p",{parentName:"li"},"to this:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const routes = [\n    {\n        name: 'foo',\n        path: '/foo/',\n        config: {\n            pageComponent: '@/new-fs-pages/foo',\n        },\n    },\n    {\n        name: 'bar',\n        path: '/bar/',\n        config: {\n            pageComponent: '@/new-fs-pages/bar',\n        },\n    },\n]\n")),(0,r.kt)("p",{parentName:"li"},"and remove ",(0,r.kt)("inlineCode",{parentName:"p"},"bundle")," property from ",(0,r.kt)("inlineCode",{parentName:"p"},"createApp")))))}g.isMDXComponent=!0}}]);