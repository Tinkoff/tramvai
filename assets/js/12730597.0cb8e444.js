"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9086],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>l});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=u(n),l=o,m=f["".concat(c,".").concat(l)]||f[l]||d[l]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function l(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9084:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>c,metadata:()=>u,toc:()=>p,default:()=>f});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={},c=void 0,u={unversionedId:"references/tokens/router",id:"references/tokens/router",title:"router",description:"Tramvai tokens used for integration and extending routing module.",source:"@site/tmp-docs/references/tokens/router.md",sourceDirName:"references/tokens",slug:"/references/tokens/router",permalink:"/docs/references/tokens/router",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tokens/router.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"render",permalink:"/docs/references/tokens/render"},next:{title:"server",permalink:"/docs/references/tokens/server"}},p=[{value:"Tokens",id:"tokens",children:[],level:2}],d={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tramvai tokens used for integration and extending routing module."),(0,i.kt)("h2",{id:"tokens"},"Tokens"),(0,i.kt)("p",null,(0,i.kt)("pre",{parentName:"p"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createToken } from '@tinkoff/dippy';\nimport type {\n  AbstractRouter,\n  NavigationGuard,\n  Route,\n  Navigation,\n  NavigationRoute,\n  NavigateOptions,\n  UpdateCurrentRouteOptions,\n  HistoryOptions,\n} from '@tinkoff/router';\nimport type { Component } from '@tramvai/tokens-common';\n\n/**\n * @description\n * Token to access the router instance\n */\nexport const ROUTER_TOKEN = createToken<AbstractRouter>('router router');\n\n/**\n * @description\n * Token for defining static routes\n */\nexport const ROUTES_TOKEN = createToken<Route>('router routes', { multi: true });\n/**\n * @description\n * Token for providing guard handlers for page transitions\n */\nexport const ROUTER_GUARD_TOKEN = createToken<NavigationGuard>('router guard', { multi: true });\n\n/**\n * @description\n * Encapsulates the logic of working with the router - contains methods for getting the configuration of the route and performing navigation\n */\nexport const PAGE_SERVICE_TOKEN = createToken<PageService>('router pageService');\n\n/**\n * @description\n * Hook to resolve route dynamically\n */\nexport const ROUTE_RESOLVE_TOKEN = createToken<RouteResolve>('router routeResolve');\n\n/**\n * @description\n * Hook to transform route config\n */\nexport const ROUTE_TRANSFORM_TOKEN = createToken<RouteTransform>('router routeTransform', {\n  multi: true,\n});\n\n/**\n * @description\n * Flag for SPA-transitions, indicating that actions must be executed before or after a route update in the stor\n */\nexport const ROUTER_SPA_ACTIONS_RUN_MODE_TOKEN = createToken<'before' | 'after'>(\n  'router spaRunMode'\n);\n\nexport interface PageService {\n  getCurrentRoute(): NavigationRoute;\n  getCurrentUrl(): ReturnType<AbstractRouter['getCurrentUrl']>;\n  getConfig(): Route['config'];\n  getContent(): Record<string, any>;\n  getMeta(): { seo: Record<string, string>; analytics: Record<string, string> };\n\n  navigate(options: string | NavigateOptions): Promise<void>;\n  updateCurrentRoute(options: UpdateCurrentRouteOptions): Promise<void>;\n  back(options?: HistoryOptions): Promise<void>;\n  forward(): Promise<void>;\n  go(to: number, options?: HistoryOptions): Promise<void>;\n\n  addComponent(name: string, component: Component): void;\n  getComponent(name: string): Component;\n\n  resolveComponentFromConfig(\n    property: 'page' | 'layout' | 'header' | 'footer' | 'errorBoundary'\n  ): Component | undefined;\n}\n\nexport type RouteResolve = (navigation: Navigation) => Promise<Route | void>;\n\nexport type RouteTransform = (route: Route) => Route;\n\n"))))}f.isMDXComponent=!0}}]);