"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[534],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(y,i(i({ref:n},l),{},{components:t})):o.createElement(y,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9043:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>p,metadata:()=>c,toc:()=>u});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],p={id:"strong-typing",title:"Strong typing"},s=void 0,c={unversionedId:"guides/strong-typing",id:"guides/strong-typing",title:"Strong typing",description:"Introduction",source:"@site/tmp-docs/guides/strong-typing.md",sourceDirName:"guides",slug:"/guides/strong-typing",permalink:"/docs/guides/strong-typing",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/guides/strong-typing.md",tags:[],version:"current",frontMatter:{id:"strong-typing",title:"Strong typing"},sidebar:"sidebar",previous:{title:"Storybook integration",permalink:"/docs/guides/storybook"},next:{title:"Styling",permalink:"/docs/guides/styling"}},l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Dependency Injection",id:"dependency-injection",level:2},{value:"Modules",id:"modules",level:3},{value:"Tokens",id:"tokens",level:3},{value:"Providers",id:"providers",level:3},{value:"React components",id:"react-components",level:3},{value:"Actions",id:"actions",level:3},{value:"Page and Layout components",id:"page-and-layout-components",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"tramvai")," has written on TypeScript, and we try to provide first-class developer experience with better typings and automatic type inference.\nNonetheless, perfect typings requires some specific utilities and recipes."),(0,a.kt)("h2",{id:"dependency-injection"},"Dependency Injection"),(0,a.kt)("p",null,"Complete information about ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai")," DI system you can find in ",(0,a.kt)("a",{parentName:"p",href:"/docs/concepts/di"},"Concepts section"),"."),(0,a.kt)("h3",{id:"modules"},"Modules"),(0,a.kt)("p",null,"First place, when we need to have a good typings - is list of providers in ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai")," modules.\nThis possible when providers wrapped in the ",(0,a.kt)("inlineCode",{parentName:"p"},"provide")," utility:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { provide, optional } from '@tramvai/core';\n\nconst BOOLEAN_TOKEN = createToken<boolean>('boolean');\nconst NUMBER_TOKEN = createToken<number>('number');\n\n@Module({\n    providers: [\n        provide({\n            provide: NUMBER_TOKEN,\n            // wrong value type, TS compilation error\n            useValue: '0',\n        }),\n        provide({\n            provide: BOOLEAN_TOKEN,\n            useFactory: (deps) => {\n                // deps.int type is number, TS compilation error\n                return deps.int === '0';\n            },\n            deps: {\n                int: NUMBER_TOKEN,\n            },\n        }),\n        // example with optional dependency\n        provide({\n            provide: BOOLEAN_TOKEN,\n            useFactory: (deps) => {\n                // optional dependency will infer as `number | null`\n                return typeof deps.int === 'number' ? deps.int > 0 : false;\n            },\n            deps: {\n                int: optional(NUMBER_TOKEN),\n            },\n        }),\n    ],\n})\nexport class SomeModule {}\n")),(0,a.kt)("h3",{id:"tokens"},"Tokens"),(0,a.kt)("p",null,"Always create tokens with specific type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const BOOLEAN_TOKEN = createToken<boolean>('boolean');\n\nconst API_SERVICE_TOKEN = createToken<ApiService>('boolean');\n\ninterface ApiService {\n    request<R>(): Promise<R>;\n}\n")),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"multi")," tokens, use the same type as you expect to provide in DI, ",(0,a.kt)("strong",{parentName:"p"},"not")," array of types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// good\nconst LIST_TOKEN = createToken<string>({ name: 'list', multi: true });\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// bad\nconst LIST_TOKEN = createToken<string[]>({ name: 'list', multi: true });\n")),(0,a.kt)("p",null,"When you need infer a token type to ",(0,a.kt)("strong",{parentName:"p"},"implement")," this interface, use ",(0,a.kt)("inlineCode",{parentName:"p"},"ExtractTokenType")," utility:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { ExtractTokenType } from '@tinkoff/dippy';\n\nconst BOOLEAN_TOKEN = createToken<boolean>('boolean');\nconst LIST_TOKEN = createToken<string>({ name: 'list', multi: true });\n\n// boolean\ntype SomeBoolInterface = ExtractTokenType<typeof BOOLEAN_TOKEN>;\n\n// string\ntype SomeListInterface = ExtractTokenType<typeof LIST_TOKEN>;\n")),(0,a.kt)("p",null,"When you need infer a token type as dependency, e.g. in ",(0,a.kt)("strong",{parentName:"p"},"arguments"),", use ",(0,a.kt)("inlineCode",{parentName:"p"},"ExtractDependencyType")," utility, this helper return array of types for ",(0,a.kt)("inlineCode",{parentName:"p"},"multi")," tokens, because array of values will return from DI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { ExtractDependencyType } from '@tinkoff/dippy';\n\nfunction someFn(deps: {\n    bool: ExtractDependencyType<typeof BOOLEAN_TOKEN>,\n    list: ExtractDependencyType<typeof LIST_TOKEN>\n}) {\n    deps.bool; // boolean\n    deps.list; // string[]\n}\n")),(0,a.kt)("h3",{id:"providers"},"Providers"),(0,a.kt)("p",null,"Sometimes you need to write providers class or factories outside modules - for code maintainability and testing purposes.\nFor these cases, you will need to manually type values and deps with ",(0,a.kt)("inlineCode",{parentName:"p"},"ExtractTokenType")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ExtractDependencyType")," utilities."),(0,a.kt)("p",null,"Factory example with ",(0,a.kt)("inlineCode",{parentName:"p"},"multi")," tokens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { ExtractTokenType, ExtractDependencyType } from '@tinkoff/dippy';\n\n// import this tokens from some other packages\nconst FOO_TOKEN = createToken<number>({ name: 'foo', multi: true });\nconst BAR_TOKEN = createToken<number>({ name: 'bar', multi: true });\n\n// factory deps\ntype Deps = {\n    bar: ExtractDependencyType<typeof BAR_TOKEN>;\n}\n\n// factory return type\ntype Result = ExtractTokenType<typeof FOO_TOKEN>;\n\nexport function fooFactory(deps: Deps): Result {\n    return [...deps.bar];\n}\n")),(0,a.kt)("p",null,"Class example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { ExtractTokenType, ExtractDependencyType } from '@tinkoff/dippy';\n\n// import this tokens from some other packages\nconst API_SERVICE_TOKEN = createToken<AbstractApiService>('boolean');\nconst LIST_TOKEN = createToken<string>({ name: 'list', multi: true });\n\n// class constructor deps\ntype Deps = {\n    list: ExtractDependencyType<typeof LIST_TOKEN>;\n}\n\n// class interface\ntype IApiService = ExtractTokenType<typeof API_SERVICE_TOKEN>;\n\nexport class ApiService implements IApiService {\n    // reuse Deps interface for simplicity\n    private list: Deps['list'];\n\n    constructor(deps: Deps) {\n        this.list = deps.list;\n    }\n}\n")),(0,a.kt)("h3",{id:"react-components"},"React components"),(0,a.kt)("p",null,"For React components, you can use hook ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/tramvai/react#usedi"},"useDi"),".\nWith this hook, all types will be inferred automatically:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { optional } from '@tramvai/core';\nimport { useDi } from '@tramvai/react';\n\nconst LIST_TOKEN = createToken<string>({ name: 'list', multi: true });\n\nconst Component = () => {\n    // string[]\n    const a = useDi(LIST_TOKEN);\n    // string[] | null\n    const b = useDi(optional(LIST_TOKEN));\n    // string[]\n    const { list: c } = useDi({ list: LIST_TOKEN });\n    // string[] | null\n    const { list: d } = useDi({ list: optional(LIST_TOKEN) });\n\n    return null;\n}\n")),(0,a.kt)("h3",{id:"actions"},"Actions"),(0,a.kt)("p",null,"For declaring action use helper function ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/tramvai/core#declareaction"},(0,a.kt)("inlineCode",{parentName:"a"},"declareAction")),". It will infer deps types and function parameters automatically."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { declareAction } from '@tramvai/core';\nimport { LOGGER_TOKEN } from '@tramvai/tokens-common';\n\nconst innerAction = declareAction({\n  name: 'inner-action',\n  fn(a: number, b = 5) {\n    // typeof LOGGER_TOKEN\n    this.deps.logger.info(`got a=${a}`);\n\n    return a + b;\n  },\n  deps: {\n    logger: LOGGER_TOKEN,\n  },\n});\n\nconst action = declareAction({\n  name: 'action',\n  async fn() {\n    // number\n    const number1 = await this.executeAction(10);\n    // number\n    const number2 = await this.executeAction(5, 3);\n  },\n})\n")),(0,a.kt)("h2",{id:"page-and-layout-components"},"Page and Layout components"),(0,a.kt)("p",null,"PageComponent and LayoutComponent comparing to ordinary React components may specify additional options and should accept limited set of props."),(0,a.kt)("p",null,"To provide better typings when defining these components use correspond types from ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/tramvai/react"},(0,a.kt)("inlineCode",{parentName:"a"},"@tramvai/react")," library")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { PageComponent, LayoutComponent } from '@tramvai/react';\n\nconst Page: PageComponent = () => <h1>Page</h1>;\n\n// props now typed\nconst Layout: LayoutComponent = ({ Header, Footer, children }) => <div>{children}</div>;\n\n// these properties are now typed\nPage.actions = [];\nPage.reducers = [];\nPage.components = {};\n\nLayout.childApps = [];\n")))}m.isMDXComponent=!0}}]);