"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7701],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>p,metadata:()=>s,toc:()=>c});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],p={id:"pages",title:"Pages"},l=void 0,s={unversionedId:"features/pages",id:"features/pages",title:"Pages",description:"Page Component",source:"@site/tmp-docs/03-features/03-pages.md",sourceDirName:"03-features",slug:"/features/pages",permalink:"/docs/features/pages",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/03-features/03-pages.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"pages",title:"Pages"},sidebar:"sidebar",previous:{title:"Styling",permalink:"/docs/tutorial/styling"},next:{title:"Layouts",permalink:"/docs/features/layouts"}},m={},c=[{value:"Page Component",id:"page-component",level:2},{value:"Actions",id:"actions",level:3},{value:"Reducers",id:"reducers",level:3},{value:"Components",id:"components",level:3},{value:"SEO and Meta Tags",id:"seo-and-meta-tags",level:3},{value:"File-System Routing",id:"file-system-routing",level:2},{value:"Define routes manually",id:"define-routes-manually",level:2},{value:"Configuration",id:"configuration",level:2},{value:"How to",id:"how-to",level:2},{value:"How to create page with dynamic parameters",id:"how-to-create-page-with-dynamic-parameters",level:3},{value:"- Next: Layouts",id:"--next-layouts",level:5}],u={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"page-component"},"Page Component"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," application Page is a React component, created in ",(0,r.kt)("inlineCode",{parentName:"p"},"routes")," directory and exported by ",(0,r.kt)("strong",{parentName:"p"},"default"),". Every Page represents a new URL in the application."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="routes/index.tsx"',title:'"routes/index.tsx"'},"import type { PageComponent } from '@tramvai/react';\n\nconst MainPage: PageComponent = () => <h1>Main Page</h1>;\n\nexport default MainPage;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PageComponent")," interface is used here for better typings - Page components may have additional static properties:"),(0,r.kt)("h3",{id:"actions"},"Actions"),(0,r.kt)("p",null,"Page components support ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/action#global-actions"},"global actions")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"actions")," static property, these actions will executed only for this page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"MainPage.actions = [fetchSomeDataAction];\n")),(0,r.kt)("p",null,"This actions will be code-splitted with page component code."),(0,r.kt)("h3",{id:"reducers"},"Reducers"),(0,r.kt)("p",null,"Page components support ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/tramvai/state/create-reducer"},"reducers")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"reducers")," static property, these reducers will be registered in application store:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"MainPage.reducers = [SomeDataStore];\n")),(0,r.kt)("p",null,"This reducers will be code-splitted with page component code."),(0,r.kt)("h3",{id:"components"},"Components"),(0,r.kt)("p",null,"Page components support additional React components in ",(0,r.kt)("inlineCode",{parentName:"p"},"components")," static property, this components will be registered in the application. You can directly access these components with ",(0,r.kt)("inlineCode",{parentName:"p"},"PAGE_SERVICE"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { usePageService } from '@tramvai/module-router';\nimport type { PageComponent } from '@tramvai/react';\n\nconst MainPage: PageComponent = () => {\n  const pageService = usePageService();\n  const ModalBox = pageService.getComponent('modal-box');\n\n  return (\n    <>\n      <h1>Main Page</h1>\n      <ModalBox />\n    </>\n  )\n};\n\nMainPage.components = {\n  'modal-box': () => <dialog>Modal Box</dialog>,\n};\n")),(0,r.kt)("p",null,"This components will be code-splitted with page component code."),(0,r.kt)("h3",{id:"seo-and-meta-tags"},"SEO and Meta Tags"),(0,r.kt)("p",null,"All possibilites below provided by ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/modules/seo"},"SeoModule")),(0,r.kt)("p",null,"Easy way to change page meta is to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"seo")," property to page component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"MainPage.seo = {\n  metaTags: {\n    title: 'Main Page Title',\n  },\n};\n")),(0,r.kt)("h2",{id:"file-system-routing"},"File-System Routing"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," provides File-System Routing approach as default way to create new pages in the application, also you always have option to provide a list of routes directly in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," router. It is possible because in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," application every page represents plain ",(0,r.kt)("inlineCode",{parentName:"p"},"Route")," object, and File-System routes is just high-level abstraction, easily converted in ",(0,r.kt)("inlineCode",{parentName:"p"},"Route")," interface."),(0,r.kt)("p",null,"For example, you want to handle this urls by your application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/\n/login/\n/comments/\n/comments/:id/\n")),(0,r.kt)("p",null,"In that case you need to create components with this file structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 routes\n    \u251c\u2500\u2500 index.tsx\n    \u251c\u2500\u2500 login\n      \u2514\u2500\u2500 index.tsx\n    \u2514\u2500\u2500 comments\n      \u251c\u2500\u2500 index.tsx\n      \u2514\u2500\u2500 [id]\n        \u2514\u2500\u2500 index.tsx\n")),(0,r.kt)("p",null,"Where path with square brackets relates to dynamic parts of url."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Every page will be wrapped in dynamic import statement with ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy")," from ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/tramvai/react"},(0,r.kt)("inlineCode",{parentName:"a"},"@tramvai/react"))," library, and will be separated into a different chunk - it is important optimization for better code splitting.")),(0,r.kt)("p",null,"Under hood, ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," will create this list of routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"[{\n  path: '/',\n  config: {\n    pageComponent: '@/routes/index',\n  },\n}, {\n  path: '/login/',\n  config: {\n    pageComponent: '@/routes/login/index',\n  },\n}, {\n  path: '/comments/',\n  config: {\n    pageComponent: '@/routes/comments/index',\n  },\n}, {\n  path: '/comments/:id/',\n  config: {\n    pageComponent: '@/routes/comments/[id]/index',\n  },\n}];\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"File for ",(0,r.kt)("inlineCode",{parentName:"p"},"/login/")," page must be named ",(0,r.kt)("inlineCode",{parentName:"p"},"login/index.tsx")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"login.tsx"),", because we must have strictly one way to convert url back to page component name.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Tinkoff/tramvai/-/tree/master/examples/fs-routing"},"Example application")),(0,r.kt)("h2",{id:"define-routes-manually"},"Define routes manually"),(0,r.kt)("p",null,"All components inside ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," directory will be automatically read from the file system and registered inside an application, this feature is called File-System Components. You can use this components by unique name when manually configuring the routes."),(0,r.kt)("p",null,"For example, you create page components with this file structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 pages\n    \u251c\u2500\u2500 index.tsx\n    \u2514\u2500\u2500 comments.tsx\n")),(0,r.kt)("p",null,"This components will be available in the application with these names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@/pages/index\n@/pages/comments\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Every component will be wrapped in dynamic import statement with ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy")," from ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/tramvai/react"},(0,r.kt)("inlineCode",{parentName:"a"},"@tramvai/react"))," library, and will be separated into a different chunk - it is important optimization for better code splitting.")),(0,r.kt)("p",null,"And you can create this routes with them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { SpaRouterModule } from '@tramvai/modules-router';\n\ncreateApp({\n  modules: [\n    SpaRouterModule.forRoot([{\n      name: 'main',\n      path: '/',\n      config: {\n        pageComponent: '@/pages/index',\n      },\n    }, {\n      name: 'comments',\n      path: '/comments/',\n      config: {\n        pageComponent: '@/pages/comments',\n      },\n    }]),\n  ],\n});\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Tinkoff/tramvai/-/tree/master/examples/fs-pages"},"Example application")),(0,r.kt)("p",null,"Another way, for example if you want to define routes in different modules, is to use ",(0,r.kt)("inlineCode",{parentName:"p"},"ROUTES_TOKEN"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module } from '@tramvai/core';\nimport { SpaRouterModule } from '@tramvai/modules-router';\n\n@Module({\n  providers: [\n    provide({\n      provide: ROUTES_TOKEN,\n      useValue: [{\n        name: 'comments',\n        path: '/comments/',\n        config: {\n          pageComponent: '@/pages/comments',\n        },\n      }]\n    }),\n  ],\n})\nexport class CommentsModule {}\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"File-System Routing is configured by ",(0,r.kt)("inlineCode",{parentName:"p"},"fileSystemPages")," option in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tramvai.json"',title:'"tramvai.json"'},'{\n  "projects": {\n    "awesome-app": {\n      "commands": {\n        "build": {\n          "configurations": {\n            "fileSystemPages": {\n              "enable": true,\n              "routesDir": "routes",\n              "pagesDir": "pages"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"how-to"},"How to"),(0,r.kt)("h3",{id:"how-to-create-page-with-dynamic-parameters"},"How to create page with dynamic parameters"),(0,r.kt)("p",null,"Wrap dynamic part of url in square brackets in file path."),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"/comments/:id/")," create page component with this path ",(0,r.kt)("inlineCode",{parentName:"p"},"routes/comments/[id]/index.tsx"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 routes\n    \u2514\u2500\u2500 comments\n      \u2514\u2500\u2500 [id]\n        \u2514\u2500\u2500 index.tsx\n")),(0,r.kt)("p",null,"When you define routes manually, use colon - ",(0,r.kt)("inlineCode",{parentName:"p"},":")," in path segment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SpaRouterModule } from '@tramvai/modules-router';\n\ncreateApp({\n  modules: [\n    SpaRouterModule.forRoot([{\n      name: 'single-comment',\n      path: '/comments/:id/',\n      config: {\n        pageComponent: '@/pages/single-comment',\n      },\n    }]),\n  ],\n});\n")),(0,r.kt)("p",null,"Dynamic parameter available in current route params, more information in ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/routing/working-with-url#route-params"},"Working with Url documentation"),"."),(0,r.kt)("h5",{id:"--next-layouts"},"- ",(0,r.kt)("a",{parentName:"h5",href:"/docs/features/layouts"},"Next: Layouts")))}d.isMDXComponent=!0}}]);