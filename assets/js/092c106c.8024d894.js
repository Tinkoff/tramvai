"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4665],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,v=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(v,i(i({ref:t},u),{},{components:n})):r.createElement(v,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},c=void 0,l={unversionedId:"references/tramvai/state/tramvai-integration",id:"references/tramvai/state/tramvai-integration",title:"tramvai-integration",description:"There are three main options for working with application state:",source:"@site/tmp-docs/references/tramvai/state/tramvai-integration.md",sourceDirName:"references/tramvai/state",slug:"/references/tramvai/state/tramvai-integration",permalink:"/docs/references/tramvai/state/tramvai-integration",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tramvai/state/tramvai-integration.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"hooks",permalink:"/docs/references/tramvai/state/hooks"},next:{title:"Papi introducton",permalink:"/docs/features/papi/introduction"}},u={},p=[{value:"Providers",id:"providers",level:2},{value:"Change of state",id:"change-of-state",level:3},{value:"Read state",id:"read-state",level:3},{value:"Subscription",id:"subscription",level:3},{value:"Connecting reducers to the app",id:"connecting-reducers-to-the-app",level:2},{value:"COMBINE_REDUCERS",id:"combine_reducers",level:3},{value:"With bundle",id:"with-bundle",level:3},{value:"Actions",id:"actions",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are three main options for working with application state:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Change state"),(0,o.kt)("li",{parentName:"ul"},"Get the state"),(0,o.kt)("li",{parentName:"ul"},"Subscribe to change of state")),(0,o.kt)("p",null,"When working with state in ",(0,o.kt)("inlineCode",{parentName:"p"},"React")," components, ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/state")," provides convenient hooks, which are described in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/tramvai/state/hooks"},"React Hooks")," documentation. But, in ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," applications, this is not enough, since there are additional entities in which work with state occurs - ",(0,o.kt)("inlineCode",{parentName:"p"},"providers")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"actions"),"."),(0,o.kt)("h2",{id:"providers"},"Providers"),(0,o.kt)("p",null,"The module ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/module-common")," connects the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateModule"),", which makes the provider ",(0,o.kt)("inlineCode",{parentName:"p"},"STORE_TOKEN")," available in the application, which implements all the possibilities of state management:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"type Store = {\n  dispatch(event);\n  subscribe(listener);\n  subscribe(reducer, listener);\n  getState();\n  getState(reducer);\n};\n")),(0,o.kt)("h3",{id:"change-of-state"},"Change of state"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"store.dispatch()")," method is used to change state, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { commandLineListTokens } from '@tramvai/core';\nimport { createEvent, createReducer } from '@tramvai/state';\nimport { STORE_TOKEN } from '@tramvai/tokens-common';\n\nconst incEvent = createEvent('inc');\nconst countReducer = createReducer('count', 0).on(inc, (state) => state + 1);\n\nconst provider = {\n  provide: commandLineListTokens.resolveUserDeps,\n  multi: true,\n  useFactory: ({ store }) => {\n    return function updateCountReducer() {\n      store.dispatch(incEvent());\n    };\n  },\n  deps: {\n    store: STORE_TOKEN,\n  },\n};\n")),(0,o.kt)("h3",{id:"read-state"},"Read state"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"store.getState()")," method is used to get the general state, or the state of a particular reducer."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"store.getState(reducer)")," is not suitable for optional stores - if you are not sure if the store is connected in the application directly or through modules, use ",(0,o.kt)("inlineCode",{parentName:"p"},"const { storeName = defaultValue } = store.getState()"))),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { commandLineListTokens } from '@tramvai/core';\nimport { createEvent, createReducer } from '@tramvai/state';\nimport { STORE_TOKEN } from '@tramvai/tokens-common';\n\nconst userReducer = createReducer('user', {});\n\nconst provider = {\n  provide: commandLineListTokens.resolveUserDeps,\n  multi: true,\n  useFactory: ({ store }) => {\n    return function readUserState() {\n      // { user: {} } - get all state\n      const state = store.getState();\n      // user: {} - get the state of a specific reducer\n      const user = store.getState(userReducer);\n    };\n  },\n  deps: {\n    store: STORE_TOKEN,\n  },\n};\n")),(0,o.kt)("h3",{id:"subscription"},"Subscription"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"store.subscribe()")," method is used to subscribe to a global state change, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { commandLineListTokens } from '@tramvai/core';\nimport { createEvent, createReducer } from '@tramvai/state';\nimport { STORE_TOKEN } from '@tramvai/tokens-common';\n\nconst incEvent = createEvent('inc');\nconst countReducer = createReducer('count', 0).on(inc, (state) => state + 1);\n\nconst provider = {\n  provide: commandLineListTokens.resolveUserDeps,\n  multi: true,\n  useFactory: ({ store }) => {\n    return function listenCountState() {\n      let currentState = store.getState(countReducer);\n\n      const unsubscribe = store.subscribe((nextGlobalState) => {\n        const nextState = store.getState(countReducer);\n\n        if (currentState !== nextState) {\n          console.log('count reducer state is:', currentState);\n          currentState = nextState;\n        }\n      });\n\n      setInterval(() => {\n        store.dispatch(incEvent());\n      }, 1000);\n    };\n  },\n  deps: {\n    store: STORE_TOKEN,\n  },\n};\n")),(0,o.kt)("p",null,"Or to subscribe to a change in the state of a specific reducer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { commandLineListTokens } from '@tramvai/core';\nimport { createEvent, createReducer } from '@tramvai/state';\nimport { STORE_TOKEN } from '@tramvai/tokens-common';\n\nconst incEvent = createEvent('inc');\nconst countReducer = createReducer('count', 0).on(inc, (state) => state + 1);\n\nconst provider = {\n  provide: commandLineListTokens.resolveUserDeps,\n  multi: true,\n  useFactory: ({ store }) => {\n    return function listenCountState() {\n      const unsubscribe = store.subscribe(countReducer, (nextState) => {\n        console.log('count reducer state is:', nextState);\n      });\n\n      setInterval(() => {\n        store.dispatch(incEvent());\n      }, 1000);\n    };\n  },\n  deps: {\n    store: STORE_TOKEN,\n  },\n};\n")),(0,o.kt)("h2",{id:"connecting-reducers-to-the-app"},"Connecting reducers to the app"),(0,o.kt)("p",null,"You have two options to connect your reducer to the app:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"with ",(0,o.kt)("a",{parentName:"li",href:"#combine_reducers"},(0,o.kt)("inlineCode",{parentName:"a"},"COMBINE_REDUCERS"))," provider"),(0,o.kt)("li",{parentName:"ul"},"through ",(0,o.kt)("a",{parentName:"li",href:"#with-bundle"},"bundle ",(0,o.kt)("inlineCode",{parentName:"a"},"reducers")," option"))),(0,o.kt)("h3",{id:"combine_reducers"},"COMBINE_REDUCERS"),(0,o.kt)("p",null,"Registering the reducers this way will allow to use its globally for every part of the app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { provide, Provider } from '@tramvai/core';\nimport { COMBINE_REDUCERS } from '@tramvai/tokens-common';\nimport { MyStore } from './reducer';\n\nexport const providers: Provider[] = [\n  provide({\n    providers: [\n      // register reducer in the application\n      {\n        provide: COMBINE_REDUCERS,\n        multi: true,\n        // highlight-next-line\n        useValue: MyStore,\n      },\n    ],\n  }),\n];\n")),(0,o.kt)("h3",{id:"with-bundle"},"With bundle"),(0,o.kt)("p",null,"When ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/bundle#create-a-bundle"},"creating a bundle")," specify ",(0,o.kt)("inlineCode",{parentName:"p"},"reducers")," option with the list of reducers. These reducers will be available only after corresponding bundle has been loaded"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createBundle } from '@tramvai/core';\nimport { MyStore } from './reducer';\n\nexport default createBundle({\n  name: 'mainDefault',\n  components: {},\n  reducers: [MyStore],\n  actions: [],\n});\n")),(0,o.kt)("h2",{id:"actions"},"Actions"),(0,o.kt)("p",null,"The module ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/module-common")," connects the provider ",(0,o.kt)("inlineCode",{parentName:"p"},"CONTEXT_TOKEN")," in the application, which, in addition to working with state (under the hood, ",(0,o.kt)("inlineCode",{parentName:"p"},"STORE_TOKEN")," is used), allows you to run actions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"type ConsumerContext = {\n  executeAction(action, payload);\n  dispatch(event);\n  subscribe(listener);\n  getState();\n  getState(reducer);\n};\n")),(0,o.kt)("p",null,"An example of using context:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { declareAction } from '@tramvai/core';\nimport { createEvent, createReducer } from '@tramvai/state';\n\nconst loadUser = createEvent('load user');\nconst userReducer = createReducer('user', { name: 'anonymus' });\n\nuserReducer.on(loadUser, (state, payload) => payload);\n\nconst fetchUserAction = declareAction({\n  name: 'fetchUser',\n  async fn() {\n    const { name } = this.getState(userReducer);\n\n    if (name !== 'anonymus') {\n      return;\n    }\n\n    const response = await this.deps.httpClient.get('/user');\n\n    this.dispatch(loadUser(response.payload));\n  },\n  deps: {\n    httpClient: HTTP_CLIENT,\n  },\n});\n")))}m.isMDXComponent=!0}}]);