"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[308],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=m(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var m=2;m<i;m++)a[m]=n[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3510:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>m,toc:()=>c,default:()=>u});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={},l=void 0,m={unversionedId:"references/modules/metrics",id:"references/modules/metrics",title:"metrics",description:"Module provides the interface described in @platform/metrics-types. On server the interface is implemented with public package prom-client that provides metrics on url /metrics Prometheus format.",source:"@site/tmp-docs/references/modules/metrics.md",sourceDirName:"references/modules",slug:"/references/modules/metrics",permalink:"/docs/references/modules/metrics",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/modules/metrics.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"log",permalink:"/docs/references/modules/log"},next:{title:"mocker",permalink:"/docs/references/modules/mocker"}},c=[{value:"Explanation",id:"explanation",children:[{value:"Monitoring outgoing requests",id:"monitoring-outgoing-requests",children:[],level:3},{value:"Client metrics",id:"client-metrics",children:[{value:"instantMetricsReporter",id:"instantmetricsreporter",children:[],level:4}],level:3}],level:2},{value:"How to",id:"how-to",children:[{value:"Usage Example",id:"usage-example",children:[],level:3},{value:"Make service names showed in metrics instead of hostnames",id:"make-service-names-showed-in-metrics-instead-of-hostnames",children:[],level:3},{value:"Use metrics to profile performance in browser",id:"use-metrics-to-profile-performance-in-browser",children:[],level:3},{value:"Use custom port for metrics endpoint",id:"use-custom-port-for-metrics-endpoint",children:[],level:3}],level:2},{value:"Debug",id:"debug",children:[],level:2},{value:"Exported tokens",id:"exported-tokens",children:[],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Module provides the interface described in ",(0,i.kt)("inlineCode",{parentName:"p"},"@platform/metrics-types"),". On server the interface is implemented with public package ",(0,i.kt)("inlineCode",{parentName:"p"},"prom-client")," that provides metrics on url ",(0,i.kt)("inlineCode",{parentName:"p"},"/metrics")," Prometheus format."),(0,i.kt)("p",null,"More details about metrics type, parameters and how to use it see in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/siimon/prom-client"},"docs to ",(0,i.kt)("inlineCode",{parentName:"a"},"prom-client")),"."),(0,i.kt)("h2",{id:"explanation"},"Explanation"),(0,i.kt)("h3",{id:"monitoring-outgoing-requests"},"Monitoring outgoing requests"),(0,i.kt)("p",null,"To monitor the state of the outgoing requests (like number of requests, number of error, time execution) the module monkey-patches ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," methods of the standard modules ",(0,i.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),". To make it work just add metrics module to the app."),(0,i.kt)("p",null,"Next labels are added to metrics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"http method"),(0,i.kt)("li",{parentName:"ul"},"http response code"),(0,i.kt)("li",{parentName:"ul"},"service name")),(0,i.kt)("p",null,"Name of the service calculates by comparing request urls with values in ",(0,i.kt)("inlineCode",{parentName:"p"},"MetricsServicesRegistry"),". Initially the register is bootstrapped with the inverted content of env variables, e.g. if some url from env is a substring of the request url, then the name of the env become the service name. If several envs matches this logic then the env with the longest url is used."),(0,i.kt)("h3",{id:"client-metrics"},"Client metrics"),(0,i.kt)("p",null,"Module implements feature to collect metrics from the clients and share it with Prometheus by sending metrics from the client to server papi-route."),(0,i.kt)("p",null,"Metrics module can help in implementing this functionality in common cases. To create metric register provider for the token ",(0,i.kt)("inlineCode",{parentName:"p"},"REGISTER_INSTANT_METRIC_TOKEN"),". Your provider should return list of two entities - first is a slug of papi-route and second is an instance of Counter. E.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { provide } from '@tramvai/core';\n\nprovide({\n  provide: REGISTER_INSTANT_METRIC_TOKEN,\n  multi: true,\n  deps: {\n    metrics: METRICS_MODULE_TOKEN,\n  },\n  useFactory({ metrics }) {\n    return ['page-load', new Counter({ name: 'client_page_load_total', help: 'Client page load' })];\n  },\n});\n")),(0,i.kt)("p",null,"After that to increment metric ",(0,i.kt)("inlineCode",{parentName:"p"},"client_page_load_total")," you can call papi-route ",(0,i.kt)("inlineCode",{parentName:"p"},"/metrics/page-load"),"."),(0,i.kt)("h4",{id:"instantmetricsreporter"},"instantMetricsReporter"),(0,i.kt)("p",null,"In practice it become clear that besides metric collection it often needed to collect logs with details. This can be implemented with ",(0,i.kt)("inlineCode",{parentName:"p"},"instantMetricsReporter"),". When calling logger module will check that any metric with the slug equal to the event of the log is exist. If so module will send request to the corresponding papi-route."),(0,i.kt)("p",null,"Next way you can log event and increment server metric:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { provide } from '@tramvai/core';\nprovide({\n  provide: commandLineListTokens.init,\n  multi: true,\n  deps: {\n    logger: LOGGER_TOKEN,\n  },\n  useFactory({ logger }) {\n    return () => {\n      window.on('load', () => {\n        logger.info({ event: 'page-load' });\n      })\n    };\n  },\n}),\n")),(0,i.kt)("h2",{id:"how-to"},"How to"),(0,i.kt)("h3",{id:"usage-example"},"Usage Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createToken } from '@tinkoff/dippy';\nimport { Module, provide } from '@tramvai/core';\nimport { Counter, Metrics, METRICS_MODULE_TOKEN } from '@tramvai/tokens-metrics';\n\ninterface SomeModuleOptions {\n  metrics: Metrics;\n}\n\nclass SomeModule {\n  private metricActionCounter: Counter;\n\n  constructor(options: SomeModuleOptions) {\n    this.metricActionCounter = options.metrics.counter({\n      name: 'some_actions_total',\n      help: 'Total count of some actions',\n    });\n  }\n\n  public action(): void {\n    this.metricActionCounter.inc();\n\n    // Do some meaningful action\n  }\n}\n\nexport const SOME_MODULE = createToken<SomeModule>('someModule');\n\n@Module({\n  providers: [\n    provide({\n      provide: SOME_MODULE,\n      useFactory: (deps) => new SomeModule(deps),\n      deps: {\n        metrics: METRICS_MODULE_TOKEN,\n      },\n    }),\n  ],\n})\nexport class SomeModuleContainer {}\n")),(0,i.kt)("h3",{id:"make-service-names-showed-in-metrics-instead-of-hostnames"},"Make service names showed in metrics instead of hostnames"),(0,i.kt)("p",null,"It is possible to give a hint to module about the service name in case url is dynamic. To do that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"use token ",(0,i.kt)("inlineCode",{parentName:"li"},"METRICS_SERVICES_REGISTRY_TOKEN"),";"),(0,i.kt)("li",{parentName:"ul"},"call ",(0,i.kt)("inlineCode",{parentName:"li"},'metricsServicesRegistry.register("Part of the url or the whole url", "Name of service")'))),(0,i.kt)("h3",{id:"use-metrics-to-profile-performance-in-browser"},"Use metrics to profile performance in browser"),(0,i.kt)("p",null,"To measure length of the events you must use method ",(0,i.kt)("inlineCode",{parentName:"p"},"startTimer")," of classes Gauge, Histogram, Summary. In dev-mode these classes are patched and methods to work with timers will use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Performance"},"PerformanceApi"),"."),(0,i.kt)("p",null,"Example without additional fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const metric = metrics.gauge({\n  name: 'request_measure',\n  help: 'Request duration measure',\n});\n\nconst endTimer = metric.startTimer();\n\nfetch(url).then(() => {\n  endTimer();\n\n  // output the result - performance.getEntriesByName('request_measure');\n});\n")),(0,i.kt)("p",null,"Example with adding dynamic fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const metric = metrics.gauge({\n  name: 'request_measure',\n  help: 'Request duration measure',\n});\n\nconst endTimer = metric.startTimer({ method: 'GET' });\n\nfetch(url).then(() => {\n  endTimer({ status: 200 });\n\n  // output the result - performance.getEntriesByName('request_measure{method=\"GET\",status=\"200\"}');\n});\n")),(0,i.kt)("h3",{id:"use-custom-port-for-metrics-endpoint"},"Use custom port for metrics endpoint"),(0,i.kt)("p",null,"It can be done with token ",(0,i.kt)("inlineCode",{parentName:"p"},"METRICS_MODULE_CONFIG_TOKEN")," and its property ",(0,i.kt)("inlineCode",{parentName:"p"},"port"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { provide } from '@tramvai/core';\nimport { METRICS_MODULE_CONFIG_TOKEN } from '@tramvai/tokens-metrics';\n\nconst providers = [\n  provide({\n    provide: METRICS_MODULE_CONFIG_TOKEN,\n    useValue: {\n      enableConnectionResolveMetrics: true,\n      port: 3001,\n    },\n  }),\n];\n")),(0,i.kt)("h2",{id:"debug"},"Debug"),(0,i.kt)("p",null,"The module uses loggers with the next ids: ",(0,i.kt)("inlineCode",{parentName:"p"},"metrics:perf"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"metrics:papi")),(0,i.kt)("h2",{id:"exported-tokens"},"Exported tokens"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/references/tokens/metrics"},"link")))}u.isMDXComponent=!0}}]);