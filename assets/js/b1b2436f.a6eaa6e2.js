"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1121],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,v=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return r?a.createElement(v,i(i({ref:t},c),{},{components:r})):a.createElement(v,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9196:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"quick-start",title:"Quick Start"},p=void 0,s={unversionedId:"get-started/quick-start",id:"get-started/quick-start",title:"Quick Start",description:"Try it on CodeSandbox!",source:"@site/tmp-docs/01-get-started/02-quick-start.md",sourceDirName:"01-get-started",slug:"/get-started/quick-start",permalink:"/docs/get-started/quick-start",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/01-get-started/02-quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"quick-start",title:"Quick Start"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/docs/get-started/overview"},next:{title:"Create application",permalink:"/docs/tutorial/new-app"}},c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"New application",id:"new-application",level:2},{value:"Development",id:"development",level:2},{value:"Application structure",id:"application-structure",level:2},{value:"Repository type",id:"repository-type",level:3},{value:"Multirepo",id:"multirepo",level:4},{value:"Monorepo",id:"monorepo",level:4},{value:"Blocks",id:"blocks",level:3},{value:"Application",id:"application",level:4},{value:"- Next: Tutorial",id:"--next-tutorial",level:5}],u={toc:d};function m(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/tramvai-new-qgk90?fontsize=14&hidenavigation=1&theme=dark"},(0,o.kt)("img",{parentName:"a",src:"https://codesandbox.io/static/img/play-codesandbox.svg",alt:"Try it on CodeSandbox!"}))),(0,o.kt)("p",null,"Tramvai provides a powerful CLI for build and development processes - ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download"},"Node.js version ",(0,o.kt)("inlineCode",{parentName:"a"},"14+")))),(0,o.kt)("h2",{id:"new-application"},"New application"),(0,o.kt)("p",null,"You can generate a new application and install required dependencies by one command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm init @tramvai@latest awesome-app\n")),(0,o.kt)("p",null,"After starting, you need to select settings - application type, project template, package manager and testing framework. For a quick start, the default settings are fine."),(0,o.kt)("h2",{id:"development"},"Development"),(0,o.kt)("p",null,"Now we need to run our application in watch mode, for easy development and to check that our project is working. To do this, execute the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd awesome-app && npm start\n")),(0,o.kt)("p",null,"This command will start a server in dev mode that will monitor the server and client code. After executing the command, you can go to the address ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/")," and see the lifted clean application."),(0,o.kt)("h2",{id:"application-structure"},"Application structure"),(0,o.kt)("p",null,"A quick overview of the structure of the application that generates by ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai new")," command. At the same time, we support both monorepositories and repositories with one application."),(0,o.kt)("p",null,"We recommend follow ",(0,o.kt)("a",{parentName:"p",href:"https://feature-sliced.design/"},"feature-sliced methodology")," guidlines to structure application code."),(0,o.kt)("h3",{id:"repository-type"},"Repository type"),(0,o.kt)("h4",{id:"multirepo"},"Multirepo"),(0,o.kt)("p",null,"The repository structure is designed for one application"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"root-directory\n\u251c\u2500\u2500 tramvai.json - project configuration for `@tramvai/cli`\n\u251c\u2500\u2500 env.development.js - environment variables used for local builds of the project\n\u2514\u2500\u2500 src - application code directory\n    \u2514\u2500\u2500 App block\n")),(0,o.kt)("h4",{id:"monorepo"},"Monorepo"),(0,o.kt)("p",null,"The repository structure is designed for the presence of several applications, and separate shared libraries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"root-directory\n\u251c\u2500\u2500 tramvai.json - project configuration for `@tramvai/cli`\n\u251c\u2500\u2500 env.development.js - environment variables used for local builds of the project\n\u251c\u2500\u2500 apps - directory with applications\n\u2502   \u251c\u2500\u2500 App block\n\u2502   \u251c\u2500\u2500 App block\n\u2514\u2500\u2500 packages - a directory with various libraries / modules that will be shared between applications\n    \u251c\u2500\u2500 Lib block\n    \u2514\u2500\u2500 Lib block\n")),(0,o.kt)("h3",{id:"blocks"},"Blocks"),(0,o.kt)("h4",{id:"application"},"Application"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"app-directory\n\u251c\u2500\u2500 index.ts - application entry point, where all tramvai modules are connected\n\u251c\u2500\u2500 polyfill.ts - polyfills used by the application (absent by default)\n\u251c\u2500\u2500 postcss.js - postcss configuration object\n\u251c\u2500\u2500 shared - reused modules of the application\n\u2514\u2500\u2500 routes - application pages\n")),(0,o.kt)("h5",{id:"--next-tutorial"},"- ",(0,o.kt)("a",{parentName:"h5",href:"/docs/tutorial/new-app"},"Next: Tutorial")))}m.isMDXComponent=!0}}]);