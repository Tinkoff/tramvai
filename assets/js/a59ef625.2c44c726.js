"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5730],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6889:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>c,contentTitle:()=>s,metadata:()=>l,toc:()=>p,default:()=>u});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],c={},s=void 0,l={unversionedId:"how-to/actions-execution",id:"how-to/actions-execution",title:"actions-execution",description:"Each action can be made global by linking to specific pages, bundles, or the application itself; this mechanism is described in detail on the Action page. Such actions will be executed automatically.",source:"@site/tmp-docs/how-to/actions-execution.md",sourceDirName:"how-to",slug:"/how-to/actions-execution",permalink:"/docs/how-to/actions-execution",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/how-to/actions-execution.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"actions-conditions",permalink:"/docs/how-to/actions-conditions"},next:{title:"How to create an action?",permalink:"/docs/how-to/how-create-action"}},p=[{value:"Binding actions to a specific page",id:"binding-actions-to-a-specific-page",children:[],level:3},{value:"Binding actions to a bundle",id:"binding-actions-to-a-bundle",children:[],level:3},{value:"Common actions for the application",id:"common-actions-for-the-application",children:[],level:2}],m={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Each action can be made global by linking to specific pages, bundles, or the application itself; this mechanism is described in detail on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/action"},"Action")," page. Such actions will be executed automatically."),(0,o.kt)("h3",{id:"binding-actions-to-a-specific-page"},"Binding actions to a specific page"),(0,o.kt)("p",null,"To do this, you can use the static property ",(0,o.kt)("inlineCode",{parentName:"p"},"actions")," of page components:"),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Creating actions"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { declareAction } from '@tramvai/core';\nimport { ACTION_EXECUTION_LIMIT } from '../constants';\nimport { set } from '../store';\n\nexport const pageInLimit = declareAction({\n  name: 'pageInLimit',\n  async fn() {\n    console.log('execute pageInLimit');\n    await this.dispatch(set({ name: 'pageInLimit', value: false }));\n    await new Promise((res) => setTimeout(res, ACTION_EXECUTION_LIMIT / 2));\n    await this.dispatch(set({ name: 'pageInLimit', value: true }));\n  },\n});\n\nexport const pageOutLimit = declareAction({\n  name: 'pageOutLimit',\n  async fn() {\n    console.log('execute pageOutLimit');\n    await this.dispatch(set({ name: 'pageOutLimit', value: false }));\n    await new Promise((res) => setTimeout(res, ACTION_EXECUTION_LIMIT * 2));\n    await this.dispatch(set({ name: 'pageOutLimit', value: true }));\n  },\n});\n\n"))))),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Connecting actions to the page"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import reduceObj from '@tinkoff/utils/object/reduce';\nimport { useSelector } from '@tramvai/state';\nimport type { PageComponent } from '@tramvai/react';\nimport { store } from '../store';\nimport { pageInLimit, pageOutLimit } from '../actions/page';\n\nexport const Page: PageComponent = () => {\n  const state = useSelector(store, (x) => x.actionTest);\n\n  return (\n    <div>\n      {reduceObj(\n        (acc, v, k) => {\n          return acc.concat(\n            <div>\n              {k} = {v.toString()}\n            </div>\n          );\n        },\n        [],\n        state\n      )}\n    </div>\n  );\n};\n\n// actions can be specified as a static property of a page component\n// in this case actions will be executed only on pages with this particular pageComponent\nPage.actions = [pageInLimit, pageOutLimit];\n\n"))))),(0,o.kt)("h3",{id:"binding-actions-to-a-bundle"},"Binding actions to a bundle"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/bundle"},"Bundles")," allow you to group pages, you can bind actions to them, which will be executed for each page of the bundle:"),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Creating actions"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { declareAction } from '@tramvai/core';\nimport { ACTION_EXECUTION_LIMIT } from '../constants';\nimport { set } from '../store';\n\nexport const bundleInLimit = declareAction({\n  name: 'bundleInLimit',\n  async fn() {\n    console.log('execute bundleInLimit');\n    await this.dispatch(set({ name: 'bundleInLimit', value: false }));\n    await new Promise((res) => setTimeout(res, ACTION_EXECUTION_LIMIT / 2));\n    await this.dispatch(set({ name: 'bundleInLimit', value: true }));\n  },\n});\n\nexport const bundleOutLimit = declareAction({\n  name: 'bundleOutLimit',\n  async fn() {\n    console.log('execute bundleOutLimit');\n    await this.dispatch(set({ name: 'bundleOutLimit', value: false }));\n    await new Promise((res) => setTimeout(res, ACTION_EXECUTION_LIMIT * 2));\n\n    if (this.abortSignal.aborted) {\n      console.log('ignore any actions as execution was aborted');\n      return;\n    }\n\n    await this.dispatch(set({ name: 'bundleOutLimit', value: true }));\n  },\n});\n\n"))))),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Connecting actions to the bundle"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createBundle } from '@tramvai/core';\nimport { store } from '../store';\nimport { bundleInLimit, bundleOutLimit } from '../actions/bundle';\nimport { Page } from '../components/Page';\n\nexport const mainDefault = createBundle({\n  name: 'mainDefault',\n  components: {\n    pageDefault: Page,\n  },\n  // let's specify our store, so that it will immediately initialize and subscribe to its dispatch events\n  reducers: [store],\n  // the actions can be specified as part of the bundle - then these actions will be executed for all pages of the bundle\n  actions: [bundleInLimit, bundleOutLimit],\n});\n\n"))))),(0,o.kt)("h2",{id:"common-actions-for-the-application"},"Common actions for the application"),(0,o.kt)("p",null,"Actions connected to ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/tramvai/core#createApp"},"application")," are executed on all pages:"),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Creating actions"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { declareAction } from '@tramvai/core';\nimport { ACTION_EXECUTION_LIMIT } from '../constants';\nimport { set } from '../store';\n\nexport const globalInLimit = declareAction({\n  name: 'globalInLimit',\n  async fn() {\n    console.log('execute globalInLimit');\n    await this.dispatch(set({ name: 'globalInLimit', value: false }));\n    // set the execution delay less than the server's execution limit, so that this action will be executed in time to ssr\n    await new Promise((res) => setTimeout(res, ACTION_EXECUTION_LIMIT / 2));\n    await this.dispatch(set({ name: 'globalInLimit', value: true }));\n  },\n});\n\nexport const globalOutLimit = declareAction({\n  name: 'globalOutLimit',\n  async fn() {\n    console.log('execute globalOutLimit');\n    await this.dispatch(set({ name: 'globalOutLimit', value: false }));\n    // set an execution delay higher than the server's execution limit, so that this action will not be executed in time with ssr\n    await new Promise((res) => setTimeout(res, ACTION_EXECUTION_LIMIT * 2));\n    await this.dispatch(set({ name: 'globalOutLimit', value: true }));\n  },\n});\n\n"))))),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Connecting actions into the application"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, provide } from '@tramvai/core';\nimport { ACTION_EXECUTION_LIMIT } from './constants';\nimport { modules } from '../common';\nimport { globalInLimit, globalOutLimit } from './actions/global';\nimport { mainDefault } from './bundles/mainDefault';\n\ncreateApp({\n  name: 'actions-execution',\n  modules: [...modules],\n  providers: [\n    provide({\n      // in the application you can specify a limit on the execution of actions on the server (by default 500ms)\n      provide: 'limitActionGlobalTimeRun',\n      useValue: ACTION_EXECUTION_LIMIT,\n    }),\n  ],\n  // these actions will be executed for all pages of the application\n  actions: [globalInLimit, globalOutLimit],\n  bundles: {\n    mainDefault: () => Promise.resolve({ default: mainDefault }),\n  },\n});\n\n"))))))}u.isMDXComponent=!0}}]);