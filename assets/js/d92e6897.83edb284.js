"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9235],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(y,o(o({ref:t},s),{},{components:n})):a.createElement(y,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6959:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>u,contentTitle:()=>c,metadata:()=>l,toc:()=>s,default:()=>d});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],u={title:"@tramvai/react-query",sidebar_position:5},c=void 0,l={unversionedId:"references/tramvai/react-query",id:"references/tramvai/react-query",title:"@tramvai/react-query",description:"A library for handling requests in React components. Based on react-query.",source:"@site/tmp-docs/references/tramvai/react-query.md",sourceDirName:"references/tramvai",slug:"/references/tramvai/react-query",permalink:"/docs/references/tramvai/react-query",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tramvai/react-query.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"@tramvai/react-query",sidebar_position:5},sidebar:"sidebar",previous:{title:"@tramvai/papi",permalink:"/docs/references/tramvai/papi"},next:{title:"@tramvai/types-actions-state-context",permalink:"/docs/references/tramvai/types-actions-state-context"}},s=[{value:"Explanation",id:"explanation",children:[],level:2},{value:"Api",id:"api",children:[{value:"Query",id:"query",children:[{value:"fork",id:"fork",children:[],level:4},{value:"prefetchAction",id:"prefetchaction",children:[],level:4},{value:"fetchAction",id:"fetchaction",children:[],level:4},{value:"raw",id:"raw",children:[],level:4}],level:3},{value:"createQuery",id:"createquery",children:[{value:"Unique query parameters",id:"unique-query-parameters",children:[],level:4}],level:3},{value:"useQuery",id:"usequery",children:[],level:3},{value:"useQueries",id:"usequeries",children:[],level:3},{value:"createInfiniteQuery",id:"createinfinitequery",children:[],level:3},{value:"useInfiniteQuery",id:"useinfinitequery",children:[],level:3},{value:"createMutation",id:"createmutation",children:[],level:3},{value:"useMutation",id:"usemutation",children:[],level:3}],level:2},{value:"How-to",id:"how-to",children:[{value:"Use <code>react-query</code> directly",id:"use-react-query-directly",children:[],level:3}],level:2}],p={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A library for handling requests in React components. Based on ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/"},"react-query"),"."),(0,i.kt)("h2",{id:"explanation"},"Explanation"),(0,i.kt)("p",null,"For the library to work, the module ",(0,i.kt)("a",{parentName:"p",href:"/docs/references/modules/react-query"},"@tramvai/module-react-query")," must be added to the tramvai application"),(0,i.kt)("h2",{id:"api"},"Api"),(0,i.kt)("h3",{id:"query"},"Query"),(0,i.kt)("p",null,"A wrapper around react-query options with tramvai integration."),(0,i.kt)("h4",{id:"fork"},"fork"),(0,i.kt)("p",null,"Create new ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," from an existing query with option to override settings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createQuery } from '@tramvai/react-query';\n\nconst query = createQuery();\nconst newQuery = query.fork({\n  refetchInterval: 2000,\n  refetchIntervalInBackground: false,\n});\n")),(0,i.kt)("h4",{id:"prefetchaction"},"prefetchAction"),(0,i.kt)("p",null,"Return a tramvai action that can be used to prefetch current query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export default function PageComponent() {\n  const { data, isLoading } = useQuery(query);\n\n  return <div>{isLoading ? 'loading...' : data}</div>;\n}\n\nComponent.actions = [query.prefetchAction()];\n")),(0,i.kt)("h4",{id:"fetchaction"},"fetchAction"),(0,i.kt)("p",null,"Return a tramvai action that can be used to fetch current query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const action = declareAction({\n  name: 'action',\n  async fn() {\n    const result = await this.executeAction(query.fetchAction());\n\n    console.log('__action__', result);\n  },\n});\n")),(0,i.kt)("h4",{id:"raw"},"raw"),(0,i.kt)("p",null,"Might be used when the raw query options is needed. The result can be passed to the underlying methods of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-query")," lib in cases when ",(0,i.kt)("inlineCode",{parentName:"p"},"@tramvai/react-query")," doesn't provide appropriate wrapper. This method is used internally in the lib to redirect calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"react-query"),"."),(0,i.kt)("h3",{id:"createquery"},"createQuery"),(0,i.kt)("p",null,"Allows you to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," object that can later be used in components using ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery"),". Used to execute single data retrieval requests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createQuery } from '@tramvai/react-query';\n\nconst query = createQuery({\n  key: 'base',\n  fn: async (_, { apiClient }) => {\n    const { payload } = await apiClient.get('api/base');\n\n    return payload;\n  },\n  deps: {\n    apiClient: TINKOFF_API_SERVICE,\n  },\n});\n")),(0,i.kt)("h4",{id:"unique-query-parameters"},"Unique query parameters"),(0,i.kt)("p",null,"To create a generic ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," that takes parameters for a query, you must return a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),", you can read more about this in the official documentation section ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/guides/query-keys"},"Query Keys")),(0,i.kt)("p",null,"As a parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," you can use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a string, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"key: 'query-name'")),(0,i.kt)("li",{parentName:"ul"},"an array where any serializable data can be used as elements, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"key: ['query-name', false, { bar: 'baz }]")),(0,i.kt)("li",{parentName:"ul"},"a function that takes the parameters with which ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," is called and returns a string - ",(0,i.kt)("inlineCode",{parentName:"li"},"key: (options) => 'query-name'")),(0,i.kt)("li",{parentName:"ul"},"a function that accepts parameters, with which ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," is called, and returns an array, where any serializable data can be used as elements - ",(0,i.kt)("inlineCode",{parentName:"li"},"key: (options) => ['query-name', options, { bar: 'baz' }]"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createQuery, useQuery } from '@tramvai/react-query';\n\nconst query = createQuery({\n  key: (id: number) => ['user', id],\n  fn: async (id, { apiClient }) => {\n    const { payload } = await apiClient.get(`api/user/${id}`);\n\n    return payload;\n  },\n  deps: {\n    apiClient: TINKOFF_API_SERVICE,\n  },\n});\n\nexport function Component({ id }) {\n  const { data, isLoading } = useQuery(query, id);\n\n  return <div>{isLoading ? 'loading...' : data}</div>;\n}\n")),(0,i.kt)("h3",{id:"usequery"},"useQuery"),(0,i.kt)("p",null,"React hook for working with ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," object"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useQuery"},"react-query docs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { useQuery } from '@tramvai/react-query';\n\nexport function Component() {\n  const { data, isLoading } = useQuery(query);\n\n  return <div>{isLoading ? 'loading...' : data}</div>;\n}\n")),(0,i.kt)("h3",{id:"usequeries"},"useQueries"),(0,i.kt)("p",null,"React Hook for working with the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," objects"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useQueries"},"react-query docs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { useQueries } from '@tramvai/react-query';\n\nexport function Component() {\n  const [\n    { data: data1, isLoading: isLoading1 },\n    { data: data2, isLoading: isLoading2 },\n  ] = useQueries([query1, query2]);\n\n  return (\n    <div>\n      <div>{isLoading1 ? 'loading1...' : data1}</div>\n      <div>{isLoading2 ? 'loading2...' : data2}</div>\n    </div>\n  );\n}\n")),(0,i.kt)("h3",{id:"createinfinitequery"},"createInfiniteQuery"),(0,i.kt)("p",null,"Creates an ",(0,i.kt)("inlineCode",{parentName:"p"},"InfiniteQuery")," object that can later be used in components using ",(0,i.kt)("inlineCode",{parentName:"p"},"useInfiniteQuery"),". It is used to execute queries to obtain a sequence of data that can be loaded as the component runs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createInfiniteQuery } from '@tramvai/react-query';\n\nconst query = createInfiniteQuery({\n  key: 'list',\n  fn: async (_, start = 0, { apiClient }) => {\n    const { payload } = await apiClient.get<Response>('api/list', {\n      query: {\n        count: 30,\n        start,\n      },\n    });\n\n    return payload;\n  },\n  getNextPageParam: (page: Response) => {\n    return page.nextPage;\n  },\n  deps: {\n    apiClient: TINKOFF_API_SERVICE,\n  },\n});\n")),(0,i.kt)("h3",{id:"useinfinitequery"},"useInfiniteQuery"),(0,i.kt)("p",null,"React hook for working with the ",(0,i.kt)("inlineCode",{parentName:"p"},"InfiniteQuery")," object"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useInfiniteQuery"},"react-query docs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { useInfiniteQuery } from '@tramvai/react-query';\n\nexport function Component() {\n  const { data, isLoading, fetchNextPage, hasNextPage } = useInfiniteQuery(query);\n\n  if (isLoading) {\n    return 'loading...';\n  }\n\n  return (\n    <div>\n      <div>\n        {data.pages.map((page) => {\n          return page.list.map((entry) => {\n            return <div key={entry}>{entry}</div>;\n          });\n        })}\n      </div>\n      {hasNextPage && (\n        <button type=\"button\" onClick={() => fetchNextPage()}>\n          Load more\n        </button>\n      )}\n    </div>\n  );\n}\n")),(0,i.kt)("h3",{id:"createmutation"},"createMutation"),(0,i.kt)("p",null,"Creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"Mutation")," object that can later be used in components using ",(0,i.kt)("inlineCode",{parentName:"p"},"useMutation"),". Used to send and modify data in the api."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMutation } from '@tramvai/react-query';\n\nconst mutation = createMutation({\n  key: 'post',\n  fn: async (_, data: string, { apiClient }) => {\n    const { payload } = await apiClient.post('api/post', {\n      body: {\n        data,\n      },\n    });\n\n    return payload;\n  },\n  deps: {\n    apiClient: TINKOFF_API_SERVICE,\n  },\n});\n")),(0,i.kt)("h3",{id:"usemutation"},"useMutation"),(0,i.kt)("p",null,"React hook for working with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mutation")," object"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useMutation"},"react-query docs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { useMutation } from '@tramvai/react-query';\n\nexport function Component() {\n  const { isLoading, mutate } = useMutation(mutation);\n\n  if (isLoading) {\n    return 'loading...';\n  }\n\n  return (\n    <button type=\"button\" onClick={() => mutate('test')}>\n      Send data\n    </button>\n  );\n}\n")),(0,i.kt)("h2",{id:"how-to"},"How-to"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/how-to/react-query-usage"},"Examples of using @tramvai/react-query")),(0,i.kt)("h3",{id:"use-react-query-directly"},"Use ",(0,i.kt)("inlineCode",{parentName:"h3"},"react-query")," directly"),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Prefer to use methods from the ",(0,i.kt)("inlineCode",{parentName:"h5"},"@tramvai/react-query")," as it is can work both with the ",(0,i.kt)("inlineCode",{parentName:"h5"},"Query")," wrapper and the query options to ",(0,i.kt)("inlineCode",{parentName:"h5"},"react-query")," itself :::")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can get ",(0,i.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/QueryClient"},(0,i.kt)("inlineCode",{parentName:"a"},"QueryClient"))," from di by token ",(0,i.kt)("inlineCode",{parentName:"p"},"QUERY_CLIENT_TOKEN")," or using method ",(0,i.kt)("inlineCode",{parentName:"p"},"useQueryClient")," in React-components."),(0,i.kt)("p",{parentName:"div"},"To convert wrapped ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," object to object acceptable by ",(0,i.kt)("inlineCode",{parentName:"p"},"react-query")," use method ",(0,i.kt)("a",{parentName:"p",href:"#raw"},"raw")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," instance."))))}d.isMDXComponent=!0}}]);