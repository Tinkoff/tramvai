"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7776],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),u=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(a.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(t),f=o,g=l["".concat(a,".").concat(f)]||l[f]||m[f]||i;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=l;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},4426:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>c,contentTitle:()=>a,metadata:()=>u,toc:()=>p,default:()=>l});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),s=["components"],c={},a=void 0,u={unversionedId:"references/tokens/metrics",id:"references/tokens/metrics",title:"metrics",description:"Tramvai tokens for integration and extension metric module.",source:"@site/tmp-docs/references/tokens/metrics.md",sourceDirName:"references/tokens",slug:"/references/tokens/metrics",permalink:"/docs/references/tokens/metrics",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tokens/metrics.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"http-client",permalink:"/docs/references/tokens/http-client"},next:{title:"render",permalink:"/docs/references/tokens/render"}},p=[{value:"Tokens list",id:"tokens-list",children:[],level:2}],m={toc:p};function l(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tramvai tokens for integration and extension ",(0,i.kt)("a",{parentName:"p",href:"/docs/references/modules/metrics"},"metric module"),"."),(0,i.kt)("h2",{id:"tokens-list"},"Tokens list"),(0,i.kt)("p",null,(0,i.kt)("pre",{parentName:"p"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createToken } from '@tinkoff/dippy';\nimport type {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\ninterface Metrics {\n  counter<T extends string = string>(opt: CounterConfiguration<T>): Counter<T>;\n  gauge<T extends string = string>(opt: GaugeConfiguration<T>): Gauge<T>;\n  histogram<T extends string = string>(opt: HistogramConfiguration<T>): Histogram<T>;\n  summary<T extends string = string>(opt: SummaryConfiguration<T>): Summary<T>;\n}\n\nexport type ModuleConfig = {\n  enableConnectionResolveMetrics: boolean;\n  port?: number;\n};\n\nexport { Counter, Gauge, Histogram, Summary, Metrics };\n\n/**\n * @description\n * Metric module implementation\n */\nexport const METRICS_MODULE_TOKEN = createToken<Metrics>('metricsModule');\n\nexport interface MetricsServicesRegistryInterface {\n  register(url: string, serviceName: string): void;\n  registerEnv(env: Record<string, unknown>): void;\n  getServiceName(url: string): string | void;\n}\n\n/**\n * @description\n * Utility for pointing out to metric module which service name to set for different requests\n */\nexport const METRICS_SERVICES_REGISTRY_TOKEN = createToken<MetricsServicesRegistryInterface>(\n  'metricsServicesRegistry'\n);\n\n/**\n * @description\n * Token for registering counter metric which can be incremented with POST papi request\n */\nexport const REGISTER_INSTANT_METRIC_TOKEN = createToken<[string, Counter<string>]>(\n  'registerInstantMetric'\n);\n\n/**\n * @description\n * Configuration for the metrics\n */\nexport const METRICS_MODULE_CONFIG_TOKEN = createToken<ModuleConfig>('metrics-module-config');\n\n"))))}l.isMDXComponent=!0}}]);