"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5734],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),o=n(6010),i=n(2389),s=n(7392),l=n(7094),p=n(2466);const c="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,n,i=e.lazy,m=e.block,d=e.defaultValue,g=e.values,k=e.groupId,v=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,s.l)(f,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var C=null===d?d:null!=(t=null!=d?d:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:h[0].props.value;if(null!==C&&!f.some((function(e){return e.value===C})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,l.U)(),y=w.tabGroupChoices,b=w.setTabGroupChoices,T=(0,r.useState)(C),x=T[0],E=T[1],j=[],P=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var M=y[k];null!=M&&M!==x&&f.some((function(e){return e.value===M}))&&E(M)}var S=function(e){var t=e.currentTarget,n=j.indexOf(t),a=f[n].value;a!==x&&(P(t),E(a),null!=k&&b(k,String(a)))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=j.indexOf(e.currentTarget)+1;n=null!=(a=j[r])?a:j[0];break;case"ArrowLeft":var o,i=j.indexOf(e.currentTarget)-1;n=null!=(o=j[i])?o:j[j.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},v)},f.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return j.push(e)},onKeyDown:O,onFocus:S,onClick:S},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(h.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function d(e){var t=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},5959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>k,frontMatter:()=>p,metadata:()=>u,toc:()=>d});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(5488),s=n(5162),l=["components"],p={id:"testing",title:"Testing"},c=void 0,u={unversionedId:"guides/testing",id:"guides/testing",title:"Testing",description:"tramvai provides a complete set of utilites for unit and integration testing.",source:"@site/tmp-docs/guides/testing.md",sourceDirName:"guides",slug:"/guides/testing",permalink:"/docs/guides/testing",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/guides/testing.md",tags:[],version:"current",frontMatter:{id:"testing",title:"Testing"},sidebar:"sidebar",previous:{title:"Styling",permalink:"/docs/guides/styling"},next:{title:"Creating a tramvai library",permalink:"/docs/guides/tramvai-library"}},m={},d=[{value:"Setup environment",id:"setup-environment",level:2},{value:"Unit tests",id:"unit-tests",level:2},{value:"Actions",id:"actions",level:3},{value:"Dependency mocks",id:"dependency-mocks",level:3},{value:"DI configuration",id:"di-configuration",level:4},{value:"Store configuration",id:"store-configuration",level:4},{value:"Reducers",id:"reducers",level:3},{value:"Modules",id:"modules",level:3},{value:"Command line runner",id:"command-line-runner",level:4},{value:"Conjunction with other modules",id:"conjunction-with-other-modules",level:4},{value:"Components",id:"components",level:3},{value:"Props changing",id:"props-changing",level:4},{value:"User interactions",id:"user-interactions",level:4},{value:"DI providers",id:"di-providers",level:4},{value:"Connected components",id:"connected-components",level:4},{value:"Hooks",id:"hooks",level:4},{value:"Integration tests",id:"integration-tests",level:2},{value:"Setup test suite",id:"setup-test-suite",level:3},{value:"Test without browser",id:"test-without-browser",level:3},{value:"Usage of <code>@tinkoff/mocker</code> in tests",id:"usage-of-tinkoffmocker-in-tests",level:3},{value:"Papi testing",id:"papi-testing",level:3},{value:"Puppeteer",id:"puppeteer",level:3},{value:"Setup",id:"setup",level:4},{value:"New page",id:"new-page",level:4},{value:"Navigation",id:"navigation",level:4},{value:"Page interaction",id:"page-interaction",level:4},{value:"Client-side requests interception",id:"client-side-requests-interception",level:4}],g={toc:d};function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," provides a complete set of utilites for unit and integration testing."),(0,o.kt)("p",null,"This utilities based on main ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," concepts and features, and built on top of solid testing solutions (any of this dependencies are optional):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://jestjs.io/"},"Jest")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/intro/"},"React Testing Library")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pptr.dev/"},"Puppeteer"))),(0,o.kt)("h2",{id:"setup-environment"},"Setup environment"),(0,o.kt)("p",null,"This setup will use ",(0,o.kt)("inlineCode",{parentName:"p"},"jest")," as test runner."),(0,o.kt)("p",null,"\u231b Install ",(0,o.kt)("inlineCode",{parentName:"p"},"jest")," dependencies and ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-node")," for TS config support:"),(0,o.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev jest jest-circus jest-environment-jsdom @types/jest ts-node\n"))),(0,o.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev jest jest-circus jest-environment-jsdom @types/jest ts-node\n")))),(0,o.kt)("p",null,"\u231b Install tramvai-specific jest presets (",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai add")," command considers current ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," version in application):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tramvai add --dev @tramvai/test-unit-jest\ntramvai add --dev @tramvai/test-integration-jest\n")),(0,o.kt)("p",null,"\u231b Create ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.config.ts")," as preset for unit tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="jest.config.ts"',title:'"jest.config.ts"'},"import type { Config } from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  preset: '@tramvai/test-unit-jest',\n  testPathIgnorePatterns: ['node_modules/', '__integration__'],\n};\n\nexport default config;\n")),(0,o.kt)("p",null,"\u231b And ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.integration.config.ts")," for integration tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="jest.integration.config.ts"',title:'"jest.integration.config.ts"'},"import type { Config } from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  preset: '@tramvai/test-integration-jest',\n  testMatch: ['**/__integration__/**/?(*.)+(test).[jt]s?(x)'],\n};\n\nexport default config;\n")),(0,o.kt)("p",null,"\u231b At last, update ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "test-app",\n  "scripts": {\n    "test": "jest",\n    "test:watch": "jest --watch",\n    "test:integration": "jest -w=3 --config ./jest.integration.config.js",\n    "test:integration:watch": "jest --runInBand --watch --config ./jest.integration.config.js"\n  }\n}\n')),(0,o.kt)("h2",{id:"unit-tests"},"Unit tests"),(0,o.kt)("p",null,"The basic building blocks of any ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," application are components, DI providers, reducers and actions."),(0,o.kt)("p",null,"Unit testing approach is perfectly suited for these blocks."),(0,o.kt)("h3",{id:"actions"},"Actions"),(0,o.kt)("p",null,"Actions can contain complex logic and interactions with global state and DI providers that can easily be covered by unit tests. Library ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-unit")," export ",(0,o.kt)("inlineCode",{parentName:"p"},"testAction")," API for this purpose, here a simple example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { declareAction } from '@tramvai/core';\nimport { testAction } from '@tramvai/test-unit';\n\n// simple action, just return some value\nexport const action = declareAction({\n  name: 'test',\n  fn() {\n    return 'ok';\n  },\n});\n\nit('test', async () => {\n  const { run } = testAction(action);\n\n  // run our action and read result\n  const result = await run();\n\n  expect(result).toEqual('ok');\n});\n")),(0,o.kt)("p",null,"Even for simple unit tests some of important dependencies need to be mocked or initialized:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"DI container"),(0,o.kt)("li",{parentName:"ul"},"Store for reducers")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"testAction")," provides a default setup for these dependencies and parameters for customizing them."),(0,o.kt)("h3",{id:"dependency-mocks"},"Dependency mocks"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-mocks")," library provides a set of mocks for the popular ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," dependencies, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ENV_MANAGER_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LOGGER_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"APP_INFO_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"REQUEST_MANAGER_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"COOKIE_MANAGER_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CREATE_CACHE_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CONTEXT_TOKEN"))),(0,o.kt)("p",null,"For complex unit tests, you can prevent writing a boilerplate code with ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonTestModule"),", which initializes all mocks and provides them to the DI container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testAction } from '@tramvai/test-unit';\nimport { CommonTestModule } from '@tramvai/test-mocks';\n\nconst action = declareAction({\n  name: 'test',\n  async fn() {\n    const { logger, envManager } = this.deps;\n    const value = envManager.get('ENV_KEY');\n\n    logger.log(value);\n  },\n  // CommonTestModule provides mocks for this deps\n  deps: {\n    logger: LOGGER_TOKEN,\n    envManager: ENV_MANAGER_TOKEN,\n  },\n});\n\nit('test', async () => {\n  const { run } = testAction(action, {\n    modules: [\n      // configure `ENV_MANAGER_TOKEN` mock, created by `CommonTestModule`, with `forRoot`\n      CommonTestModule.forRoot({ env: { ENV_KEY: 'ENV_VALUE' } }),\n    ],\n  });\n\n  await run();\n});\n")),(0,o.kt)("h4",{id:"di-configuration"},"DI configuration"),(0,o.kt)("p",null,"DI mock is the main opportunity to change the behavior of dependencies in unit tests. You can pass a custom DI container to utilities, or only list of required modules and providers. In example below both test suites are equivalent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testAction } from '@tramvai/test-unit';\nimport { createMockDi } from '@tramvai/test-mocks';\n\nit('pass custom di', async () => {\n  const di = createMockDi({ modules: [], providers: [] });\n  const { run } = testAction(action, { di });\n\n  await run();\n});\n\nit('pass modules and providers', async () => {\n  const { run } = testAction(action, { modules: [], providers: [] });\n\n  await run();\n});\n")),(0,o.kt)("p",null,"For example, you want to mock HTTP client for action, so you need to provide ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTP_CLIENT")," mock:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testAction } from '@tramvai/test-unit';\nimport { declareAction } from '@tramvai/core';\nimport { HTTP_CLIENT } from '@tramvai/tokens-http-client';\n\n// simple action with request to /foo/bar endpoint\nconst action = declareAction({\n  name: 'test',\n  async fn() {\n    const { httpClient } = this.deps;\n\n    await httpClient.request('/foo/bar');\n  },\n  deps: {\n    // default HTTP client from @tramvai/module-http-client\n    httpClient: HTTP_CLIENT,\n  },\n});\n\nit('test', async () => {\n  const request = jest.fn(async () => ({ payload: null }));\n\n  // create mock for HTTP_CLIENT\n  const providers = [\n    {\n      provide: HTTP_CLIENT,\n      useValue: {\n        request,\n      },\n    },\n  ];\n\n  // pass this mock to DI\n  const { run } = testAction(action, { providers });\n\n  await run();\n\n  // check than request was called\n  expect(request).toHaveBeenCalledWith('/foo/bar');\n});\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Better way to test HTTP calls is to mock as little as possible. For unit tests, prefer to mock ",(0,o.kt)("inlineCode",{parentName:"p"},"node-fetch")," library, and use real HTTP clients implementations."),(0,o.kt)("p",{parentName:"admonition"},"This kind of mocks requires more setup code, because we need to initialize ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," network layer. Some modules export specific utilities for simplifying testing process. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/module-http-client")," export ",(0,o.kt)("a",{parentName:"p",href:"https://tramvai.dev/docs/references/modules/http-client/#testing-your-api-clients"},"testApi")," helper.")),(0,o.kt)("h4",{id:"store-configuration"},"Store configuration"),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," Store mock you can pass a list of reducers, or initial state object, or both. Reducers will be registered in Store directly, and if initial state will have the same keys, this values will be applied for the relevant reducers. For the rest of initial state keys, fake reducers will be created."),(0,o.kt)("p",null,"Example with passed ",(0,o.kt)("inlineCode",{parentName:"p"},"stores"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer } from '@tramvai/state';\nimport { createMockStore } from '@tramvai/test-mocks';\n\nconst reducer = createReducer('test', { value: 'initial' });\n\nconst store = createMockStore({ stores: [reducer] });\nconst state = store.getState();\n\nconsole.log(state.test); // { value: 'initial' }\n")),(0,o.kt)("p",null,"Example with passed ",(0,o.kt)("inlineCode",{parentName:"p"},"initialState"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMockStore } from '@tramvai/test-mocks';\n\nconst initialState = { test: { value: 'initial' } };\n\nconst store = createMockStore({ initialState });\nconst state = store.getState();\n\nconsole.log(state.test); // { value: 'initial' }\n")),(0,o.kt)("p",null,"Example with store and replaced initial state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer } from '@tramvai/state';\nimport { declareAction } from '@tramvai/core';\nimport { testAction } from '@tramvai/test-unit';\n\nconst reducer = createReducer('test', { value: 'initial' });\n// the same key as the reducer name\nconst initialState = { test: { value: 'replaced' } };\n\nconst store = createMockStore({ stores: [reducer], initialState });\nconst state = store.getState();\n\nconsole.log(state.test); // { value: 'replaced' }\n")),(0,o.kt)("p",null,"And complete example with action testing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer, createEvent } from '@tramvai/state';\nimport { declareAction } from '@tramvai/core';\n\nconst increment = createEvent('increment');\nconst reducer = createReducer('counter', 0).on(increment, (state) => state + 1);\n\nconst action = declareAction({\n  name: 'increment',\n  async fn() {\n    await this.dispatch(increment());\n  },\n});\n\nit('test', async () => {\n  // no need to use createMockStore directly, just pass store to testAction\n  const { run, context } = testAction(action, { stores: [reducer] });\n\n  // context.getState is just alias for store.getState\n  expect(context.getState()).toEqual({ counter: 0 });\n\n  await run();\n\n  expect(context.getState()).toEqual({ counter: 1 });\n});\n")),(0,o.kt)("h3",{id:"reducers"},"Reducers"),(0,o.kt)("p",null,"Every reducers in ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," application is an independent part of the global Store, and also can be covered by unit tests. Because reducers do not interact directly with DI, we don't need to mock anything. Library ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-unit")," export ",(0,o.kt)("inlineCode",{parentName:"p"},"testReducer")," API for this purpose, where Store will be created automatically, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer, createEvent } from '@tramvai/state';\nimport { testReducer } from '@tramvai/test-unit';\n\nconst increment = createEvent('increment');\n\nconst reducer = createReducer('counter', 0).on(increment, (state) => state + 1);\n\nit('increment', () => {\n  const store = testReducer(reducer);\n\n  expect(store.getState()).toEqual(0);\n\n  store.dispatch(increment());\n\n  expect(store.getState()).toEqual(1);\n});\n")),(0,o.kt)("h3",{id:"modules"},"Modules"),(0,o.kt)("p",null,"In general, modules in ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," are just configurable sets of DI providers, united by common features. Testing a module involves checking its initialization and behavior of the providers added to the application. Library ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-unit")," exports ",(0,o.kt)("inlineCode",{parentName:"p"},"testModule")," API for this purpose, and like ",(0,o.kt)("inlineCode",{parentName:"p"},"testAction")," API, DI container mock will be created automatically, and can be configured or replaced."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Integration tests usually is a better way to testing complex modules, because you can test a real application behavior, not only ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," internals."),(0,o.kt)("p",{parentName:"admonition"},"If the module being tested has a direct impact on the response of the application (HTML markup, redirects, any other side-effect), use ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-integration")," library, and additionally ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-pw")," to run tests in a real browser. But if your module only adds some dependencies without side-effects to DI, e.g. API clients, unit testing is a simpliest way to go.")),(0,o.kt)("p",null,"Imagine, you write a ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," module, which provide custom logger for your application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module, provide, createToken } from '@tramvai/core';\n\ninterface CustomLogger {\n  log(message: string): void;\n}\n\nconst CUSTOM_LOGGER_TOKEN = createToken<(name: string) => CustomLogger>('custom logger');\n\n@Module({\n  providers: [\n    provide({\n      provide: CUSTOM_LOGGER_TOKEN,\n      useValue: (name: string) => ({\n        log: (message: string) => console.log(`[${name}] ${message}`),\n      }),\n    }),\n  ],\n})\nclass CustomLoggerModule {}\n")),(0,o.kt)("p",null,"Simple unit test for ",(0,o.kt)("inlineCode",{parentName:"p"},"CUSTOM_LOGGER_TOKEN")," provider can look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testModule } from '@tramvai/test-unit';\n\njest.spyOn(global.console, 'log');\n\nit('test', () => {\n  const { di } = testModule(CustomLoggerModule);\n\n  const logger = di.get(CUSTOM_LOGGER_TOKEN);\n\n  logger('test').log('hello world');\n\n  expect(console.log).toBeCalledWith('[test] hello world');\n});\n")),(0,o.kt)("h4",{id:"command-line-runner"},"Command line runner"),(0,o.kt)("p",null,"For example, we want to add some logic to ",(0,o.kt)("inlineCode",{parentName:"p"},"commandLineRunner")," step, let's create a new module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module, provide, commandLineListTokens } from '@tramvai/core';\n\n@Module({\n  providers: [\n    provide({\n      provide: commandLineListTokens.customerStart,\n      useValue: () => {\n        console.log('customer_start line');\n      },\n    }),\n  ],\n})\nclass TestModule {}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"testModule")," will return ",(0,o.kt)("inlineCode",{parentName:"p"},"runLine")," method for easy calls of different stages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testModule } from '@tramvai/test-unit';\nimport { commandLineListTokens } from '@tramvai/core';\n\njest.spyOn(global.console, 'log');\n\nit('test', async () => {\n  const { runLine } = testModule(TestModule);\n\n  expect(console.log).not.toBeCalled();\n\n  // Run only specific command line in order to execute handlers for this line inside module\n  // highlight-next-line\n  await runLine(commandLineListTokens.customerStart);\n\n  expect(console.log).toBeCalledWith('customer_start line');\n});\n")),(0,o.kt)("h4",{id:"conjunction-with-other-modules"},"Conjunction with other modules"),(0,o.kt)("p",null,"For example, we want to use logger from ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomLoggerModule")," in our ",(0,o.kt)("inlineCode",{parentName:"p"},"TestModule"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module, provide, commandLineListTokens } from '@tramvai/core';\n\n@Module({\n  providers: [\n    provide({\n      provide: commandLineListTokens.customerStart,\n      useFactory: ({ loggerFactory }) => {\n        const logger = loggerFactory('test');\n\n        return () => {\n          logger.log('customer_start line');\n        };\n      },\n      deps: {\n        loggerFactory: CUSTOM_LOGGER_TOKEN,\n      },\n    }),\n  ],\n})\nclass TestModule {}\n")),(0,o.kt)("p",null,"We can pass ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomLoggerModule")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"modules")," property in ",(0,o.kt)("inlineCode",{parentName:"p"},"testModule")," utility:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testModule } from '@tramvai/test-unit';\nimport { commandLineListTokens } from '@tramvai/core';\n\njest.spyOn(global.console, 'log');\n\nit('test', async () => {\n  const { runLine } = testModule(TestModule, {\n    modules: [CustomLoggerModule],\n  });\n\n  expect(console.log).not.toBeCalled();\n\n  // highlight-next-line\n  await runLine(commandLineListTokens.customerStart);\n\n  expect(console.log).toBeCalledWith('[test] customer_start line');\n});\n")),(0,o.kt)("h3",{id:"components"},"Components"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"testComponent")," uses ",(0,o.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro"},"@testing-library/react")," under the hood, initializes ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," mocks and wraps target component in necessary providers."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Only React >= 18 version is supported")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Use jest ",(0,o.kt)("inlineCode",{parentName:"p"},"jsdom")," environment for components unit testing.")),(0,o.kt)("p",null,"Basic unit test example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @jest-environment jsdom\n */\n\nimport { testComponent, screen } from '@tramvai/test-react';\n\nconst Component = ({ id }: { id: string }) => {\n  return <div data-testid={id}>Content</div>;\n};\n\nit('event', () => {\n  // render\n  testComponent(<Component id=\"test\" />);\n\n  // assert\n  expect(screen.getByTestId('test').textContent).toBe('Content');\n});\n")),(0,o.kt)("h4",{id:"props-changing"},"Props changing"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @jest-environment jsdom\n */\n\nimport { testComponent, screen } from '@tramvai/test-react';\n\nconst Component = ({ content }: { content: string }) => {\n  return <div data-testid=\"test\">{content}</div>;\n};\n\nit('props', () => {\n  const { rerender } = testComponent(<Component content=\"Content\" />);\n\n  expect(screen.getByTestId('test').textContent).toBe('Content');\n\n  rerender(<Component content=\"New content\" />);\n\n  expect(screen.getByTestId('test').textContent).toBe('New content');\n});\n")),(0,o.kt)("h4",{id:"user-interactions"},"User interactions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"testComponent")," will return ",(0,o.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/guide-events/"},"fireEvent")," method for events simulation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @jest-environment jsdom\n */\n\nimport { useState } from 'react';\nimport { testComponent } from '@tramvai/test-react';\n\nconst Component = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <>\n      <h3>{count}</h3>\n      <button onClick={() => setCount(count + 1)}>Click</button>\n    </>\n  );\n};\n\nit('click', async () => {\n  // the same methods as from `@tramvai/test-react`\n  const { fireEvent, screen } = testComponent(<Component />);\n\n  expect(screen.getByRole('heading').textContent).toBe('0');\n\n  await fireEvent.click(screen.getByRole('button'));\n\n  expect(screen.getByRole('heading').textContent).toBe('1');\n});\n")),(0,o.kt)("h4",{id:"di-providers"},"DI providers"),(0,o.kt)("p",null,"As many other ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," testing utilities, you can pass custom DI or providers to ",(0,o.kt)("inlineCode",{parentName:"p"},"testComponent"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @jest-environment jsdom\n */\n\nimport { createToken } from '@tramvai/core';\nimport { useDi } from '@tramvai/react';\nimport { testComponent, screen } from '@tramvai/test-react';\n\nconst CONTENT_TOKEN = createToken<string>('content');\n\nconst Component = () => {\n  const content = useDi(CONTENT_TOKEN);\n\n  return <div data-testid=\"test\">{content}</div>;\n};\n\nit('di', () => {\n  testComponent(<Component />, {\n    providers: [{ provide: CONTENT_TOKEN, useValue: 'Content from DI' }],\n  });\n\n  expect(screen.getByTestId('test').textContent).toBe('Content from DI');\n});\n")),(0,o.kt)("h4",{id:"connected-components"},"Connected components"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"testComponent")," allow you to provide any stores or initial state and will return ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," instance for events or actions runs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @jest-environment jsdom\n */\n\nimport { createReducer, createEvent, useStore } from '@tramvai/state';\nimport { testComponent } from '@tramvai/test-react';\n\nconst incrementEvent = createEvent('increment');\n\nconst CountStore = createReducer('count', 0).on(incrementEvent, (state) => state + 1);\n\nconst Component = () => {\n  const count = useStore(CountStore);\n\n  return <h3>{count}</h3>;\n};\n\nit('state', async () => {\n  const { context, act, screen } = testComponent(<Component />, {\n    stores: [CountStore],\n  });\n\n  expect(screen.getByRole('heading').textContent).toBe('0');\n\n  // act is required for react@18 concurrent features, we need to wait for state update and component rerender\n  await act(() => {\n    context.dispatch(incrementEvent());\n  });\n\n  expect(screen.getByRole('heading').textContent).toBe('1');\n});\n")),(0,o.kt)("h4",{id:"hooks"},"Hooks"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"testHook")," API looks looks very similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"testComponent"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @jest-environment jsdom\n */\n\nimport { useStore } from '@tramvai/state';\nimport { testHook } from '@tramvai/test-react';\n\nconst useCountStore = () => {\n  return useStore(CountStore);\n};\n\nit('hook', async () => {\n  const { result, context, act } = testHook(() => useCountStore(), {\n    stores: [CountStore],\n  });\n\n  expect(result.current).toBe(0);\n\n  await act(() => {\n    context.dispatch(incrementEvent());\n  });\n\n  expect(result.current).toBe(1);\n});\n")),(0,o.kt)("h2",{id:"integration-tests"},"Integration tests"),(0,o.kt)("p",null,"For any web applications, comprehensive testing requires running that application in a browser. For SSR applications, another main requirement is to build and start server code of the application."),(0,o.kt)("p",null,"We will use ",(0,o.kt)("inlineCode",{parentName:"p"},"jest")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"puppeteer")," in examples below."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," provides few packages for integration testing:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@tramvai/test-integration")," responsible for running application"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@tramvai/test-integration-jest")," contains ",(0,o.kt)("inlineCode",{parentName:"li"},"jest")," configuration"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@tramvai/test-pw")," provides wrappers for testing application in-browser")),(0,o.kt)("h3",{id:"setup-test-suite"},"Setup test suite"),(0,o.kt)("p",null,"Test suite in ",(0,o.kt)("inlineCode",{parentName:"p"},"jest")," terms is the root ",(0,o.kt)("inlineCode",{parentName:"p"},"describe")," block in the test file. We need to build and run application once for test suite, and close application server when test suite is finished."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/test-integration")," export ",(0,o.kt)("inlineCode",{parentName:"p"},"startCli")," method, which works similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai new")," command. This API allows to configure application build, for example provide any environment variables or run application on different port."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"startCli")," makes development build of the application")),(0,o.kt)("p",null,"Let's create a minimal test suite example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { StartCliResult } from '@tramvai/test-integration';\nimport { startCli } from '@tramvai/test-integration';\n\ndescribe('testing-app', () => {\n  // `startCli` will return some useful testing API's, which we will use later in test cases\n  let app: StartCliResult;\n\n  // build and run once\n  beforeAll(async () => {\n    // pass application name, which will be resolved from `tramvai.json`\n    app = await startCli('testing-app', {\n      // pass any environment variables\n      env: {\n        SOME_ENV: 'test',\n      },\n    });\n    // timeout depends on your application build time\n  }, 80000);\n\n  // close after end\n  afterAll(() => {\n    return app.close();\n  });\n});\n")),(0,o.kt)("h3",{id:"test-without-browser"},"Test without browser"),(0,o.kt)("p",null,"For testing requests to the tramvai app pages (aka ",(0,o.kt)("inlineCode",{parentName:"p"},"curl"),") libraries ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/visionmedia/supertest"},"supertest")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/taoqf/node-html-parser"},"node-html-parser")," are used under hood."),(0,o.kt)("p",null,"Call of ",(0,o.kt)("inlineCode",{parentName:"p"},"app.request")," sends requests to the app. All of the features of ",(0,o.kt)("inlineCode",{parentName:"p"},"supertest")," are available."),(0,o.kt)("p",null,"Call of ",(0,o.kt)("inlineCode",{parentName:"p"},"app.render")," resolves to the HTML render that is returned from server while serving the request."),(0,o.kt)("p",null,"For example, we want to check that the page ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," returns 200 status code and application content in the HTML:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('request', async () => {\n  // `supertest` API, send request to root page\n  const response = await app\n    .request('/')\n    // test status code\n    .expect(200)\n    // test headers\n    .expect('X-App-Id', 'testing-app');\n\n  // test application content\n  expect(response.text).toMatch('<div class=\"application\">rootPage</div>');\n});\n")),(0,o.kt)("p",null,"As alternative to ",(0,o.kt)("inlineCode",{parentName:"p"},"response.text"),", we can test parsed HTML result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('render', async () => {\n  const page = await app.render('/');\n\n  // test application content, already parsed\n  expect(page.application).toMatch('rootPage');\n\n  // or use `node-html-parser` API, which is similar to DOM API\n  expect(page.parsed.querySelector('.application').innerHTML).toMatch('rootPage');\n});\n")),(0,o.kt)("h3",{id:"usage-of-tinkoffmocker-in-tests"},"Usage of ",(0,o.kt)("inlineCode",{parentName:"h3"},"@tinkoff/mocker")," in tests"),(0,o.kt)("p",null,"In order to use mocker there should be added ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/modules/mocker"},(0,o.kt)("inlineCode",{parentName:"a"},"@tramvai/module-mocker"))," to the tramvai app modules list."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/module-mocker")," works by replacing mocked API env variables when application starts."),(0,o.kt)("p",{parentName:"admonition"},"You can pass list of mocked env variables directly in ",(0,o.kt)("inlineCode",{parentName:"p"},"MockerModule"),", and it will not affect production code, for integration tests all requests to API without specific mocks just will be proxied to original env value:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MockerModule.forRoot({\n  config: async () => ({\n    apis: ['AWESOME_API'],\n  }),\n});\n")),(0,o.kt)("p",{parentName:"admonition"},"Or add a file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"mocks")," folder:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="mocks/awesome-api.js"',title:'"mocks/awesome-api.js"'},"module.exports = {\n  api: 'AWESOME_API',\n  mocks: {},\n};\n")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"app.mocker.addMocks")," will have no effect if mocked API (method first argument) not in the list!")),(0,o.kt)("p",null,"After that mocker will read file based mocks as described in the docs to the mocker itself and it can be used dynamically in the tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('should work with mocker', async () => {\n  // AWESOME_API - env variable with target API base url\n  await app.mocker.addMocks('AWESOME_API', {\n    // api endpoint method, pathname and response\n    'GET /endpoint/': {\n      status: 200,\n      payload: {\n        status: 'OK',\n        response: 'smth',\n      },\n    },\n  });\n\n  await app.request('/some-page/').expect(200);\n\n  // clear HTTP clients cache for fresh requests\n  await app.papi.clearCache();\n  await app.mocker.removeMocks('AWESOME_API', ['GET /endpoint/']);\n\n  await app.request('/some-page/').expect(500);\n});\n")),(0,o.kt)("h3",{id:"papi-testing"},"Papi testing"),(0,o.kt)("p",null,"For ",(0,o.kt)("a",{parentName:"p",href:"/docs/features/papi/introduction"},"papi")," methods testing you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"app.papi")," wrapper methods ",(0,o.kt)("inlineCode",{parentName:"p"},"publicPapi")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"privatePapi")," with all ",(0,o.kt)("inlineCode",{parentName:"p"},"supertest")," features."),(0,o.kt)("p",null,"For example, let's make request to built-in papi method which returns all application routes in payload:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'it(\'papi\', async () => {\n  const response = await app.papi.publicPapi(\'bundleInfo\').expect(200);\n\n  expect(response.body).toMatchInlineSnapshot(`\n    {\n      "payload": [\n        "/",\n      ],\n      "resultCode": "OK",\n    }\n  `);\n});\n')),(0,o.kt)("h3",{id:"puppeteer"},"Puppeteer"),(0,o.kt)("h4",{id:"setup"},"Setup"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"puppeteer")," instance need to be initialized in the start of the test suite, and closed in the end:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { initPlaywright } from '@tramvai/test-pw';\n\nit('puppeteer', async () => {\n  // pass application url, usually http://localhost:3000\n  const { browser } = await initPlaywright(app.serverUrl);\n\n  // ...\n\n  return browser.close();\n});\n")),(0,o.kt)("h4",{id:"new-page"},"New page"),(0,o.kt)("p",null,"Default example, open ",(0,o.kt)("inlineCode",{parentName:"p"},"/second-page/")," application url in browser, step by step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  initPlaywright,\n  // highlight-next-line\n  wrapPlaywrightPage,\n} from '@tramvai/test-pw';\n\nit('puppeteer', async () => {\n  const { browser } = await initPlaywright(app.serverUrl);\n\n  // highlight-start\n  // open empty browser tab\n  const page = await browser.newPage();\n  // wrapper required for better logs\n  const wrapper = wrapPlaywrightPage(page);\n\n  // equivalent to navigate browser tab to \"http://localhost:3000/second-page/\" url\n  await page.goto(`${app.serverUrl}/second-page/`);\n  // highlight-end\n\n  return browser.close();\n});\n")),(0,o.kt)("p",null,"The same, but simplified example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('puppeteer', async () => {\n  const { browser, getPageWrapper } = await initPlaywright(app.serverUrl);\n\n  // highlight-next-line\n  const { page } = await getPageWrapper(`${app.serverUrl}/second-page/`);\n\n  return browser.close();\n});\n")),(0,o.kt)("h4",{id:"navigation"},"Navigation"),(0,o.kt)("p",null,"Page wrapper return special ",(0,o.kt)("inlineCode",{parentName:"p"},"router")," object, which works directly with ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," router on the page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('puppeteer', async () => {\n  const { browser, getPageWrapper } = await initPlaywright(app.serverUrl);\n\n  // highlight-start\n  const { router } = await getPageWrapper(`${app.serverUrl}/second-page/`);\n\n  // SPA-navigation with SpaRouterModule, hard reload with NoSpaRouterModule.\n  // equivalent to `pageService.navigate('/third-page/')`\n  router.navigate('/third-page/');\n\n  // update current url or router params without reloading, if possible.\n  // equivalent to `pageService.updateCurrentRoute({ query: { foo: 'bar' } })`\n  router.updateCurrentRoute({ query: { foo: 'bar' } });\n  // highlight-end\n\n  return browser.close();\n});\n")),(0,o.kt)("h4",{id:"page-interaction"},"Page interaction"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"puppeteer")," provides a lot of different API's, here is some useful for testing:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pptr.dev/api/puppeteer.page.evaluate"},"page.evaluate")," is main method for execute code in the page context."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pptr.dev/api/puppeteer.page._eval"},"page.$eval")," is alias over page ",(0,o.kt)("inlineCode",{parentName:"li"},"document.querySelector"),".")),(0,o.kt)("p",null,"In example below we will check ",(0,o.kt)("inlineCode",{parentName:"p"},".application")," element content with both methods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('puppeteer', async () => {\n  const { browser, getPageWrapper } = await initPlaywright(app.serverUrl);\n\n  const { page } = await getPageWrapper(app.serverUrl);\n\n  // highlight-start\n  const pageUrl = await page.evaluate(() => window.location.pathname);\n  const pageContent = await page.$eval('.application', (node) => node.innerHTML);\n\n  expect(pageUrl).toEqual(`/`);\n  expect(pageContent).toEqual('Main page');\n  // highlight-end\n\n  return browser.close();\n});\n")),(0,o.kt)("h4",{id:"client-side-requests-interception"},"Client-side requests interception"),(0,o.kt)("p",null,"For example, we want to block any requests to ",(0,o.kt)("inlineCode",{parentName:"p"},"https://www.test.api.example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"it('puppeteer', async () => {\n  const { browser, getPageWrapper } = await initPlaywright(app.serverUrl);\n\n  const { page } = await getPageWrapper(app.serverUrl);\n\n  // highlight-start\n  // enable requests interception\n  page.setRequestInterception(true);\n\n  // listen for all requests\n  page.on('request', (req) => {\n    // check request url\n    if (req.url() === 'https://www.test.api.example/') {\n      // send 500 response\n      req.respond({\n        status: 500,\n        contentType: 'text/plain',\n        body: 'Blocked',\n      });\n\n      return;\n    }\n\n    // allow all other requests\n    return req.continue();\n  });\n  // highlight-end\n\n  return browser.close();\n});\n")))}k.isMDXComponent=!0}}]);