"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8624],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return a?n.createElement(f,s(s({ref:t},m),{},{components:a})):n.createElement(f,s({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9717:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),s=["components"],o={},l=void 0,p={unversionedId:"references/libs/meta-tags-generate",id:"references/libs/meta-tags-generate",title:"meta-tags-generate",description:"Library for generating and updating meta-tags in browser.",source:"@site/tmp-docs/references/libs/meta-tags-generate.md",sourceDirName:"references/libs",slug:"/references/libs/meta-tags-generate",permalink:"/tramvai/docs/references/libs/meta-tags-generate",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/libs/meta-tags-generate.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"measure-fastify-requests",permalink:"/tramvai/docs/references/libs/measure-fastify-requests"},next:{title:"minicss",permalink:"/tramvai/docs/references/libs/minicss"}},m={},c=[{value:"Api",id:"api",level:2},{value:"Format",id:"format",level:3},{value:"Converters",id:"converters",level:3},{value:"Sources",id:"sources",level:3},{value:"How to",id:"how-to",level:2},{value:"Set Meta",id:"set-meta",level:3},{value:"Remove meta parameters",id:"remove-meta-parameters",level:3}],u={toc:c};function d(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Library for generating and updating meta-tags in browser."),(0,i.kt)("h2",{id:"api"},"Api"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Meta({ list: [] }): Meta")," - object used for constructing an instance of meta-tags based on passed sources"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Render(meta: Meta): { render(): string }")," - render of specific ",(0,i.kt)("em",{parentName:"li"},"Meta")," instance as a string. Used in SSR"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Update(meta: Meta): { update(): void }")," - updates meta-tags layout in browser. Used in browser while SPA-navigations")),(0,i.kt)("h3",{id:"format"},"Format"),(0,i.kt)("p",null,"Library accepts special parameters which are used to generate result html tags. These parameters have next format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  customTag: { tag: 'meta', attributes: { name: 'k', content: 'i' }, innerHtml: '1' }\n}\n")),(0,i.kt)("p",null,"thar renders in the next tag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<meta name="k" content="i">1</meta>\n')),(0,i.kt)("h3",{id:"converters"},"Converters"),(0,i.kt)("p",null,"Converters are used to convert meta-tags with specific keys in ",(0,i.kt)("a",{parentName:"p",href:"#format"},"format view")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"new Meta({ list, converters: { title: (value) => ({ tag: 'meta', innerHtml: value }) } });\n")),(0,i.kt)("p",null,"After that you now can pass meta as ",(0,i.kt)("inlineCode",{parentName:"p"},"{ title: '\u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444' }")," in order to render it through converter above."),(0,i.kt)("h3",{id:"sources"},"Sources"),(0,i.kt)("p",null,"Through options ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," can be passed sources for meta-tags generating. These sources have the form of function that are called in runtime for generating result render. E.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const list = [\n  (walker) =>\n    walker.updateMeta(10, {\n      title: 'test',\n      tag: { tag: 'meta', attributes: { link: 'link' } },\n    }),\n  (walker) =>\n    walker.updateMeta(20, {\n      title: 'tinkoff',\n      ogTitle: 'tinkoff',\n    }),\n];\nconst meta = new Meta({ list, converters });\n")),(0,i.kt)("p",null,"When generating meta tags all functions passed in ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," will be called with argument of class ",(0,i.kt)("inlineCode",{parentName:"p"},"Walker"),". Inside such function it is possible to modify data using method ",(0,i.kt)("inlineCode",{parentName:"p"},"updateMeta"),", which accepts the priority of the change and value. Elements with higher priority overrides values with lower priorities."),(0,i.kt)("h2",{id:"how-to"},"How to"),(0,i.kt)("h3",{id:"set-meta"},"Set Meta"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Meta, Render, Update } from '@tinkoff/meta-tags-generate';\n\nconst list = [\n  (walker) =>\n    walker.updateMeta(10, {\n      title: 'test',\n      tag: { tag: 'meta', attributes: { link: 'link' } },\n    }),\n];\nconst meta = new Meta({ list, converters });\n\nconst metaContent = new Render(meta).render();\nconsole.log(metaContent); // > <title>test</title><meta link=link/>\n\nnew Update(meta).update(); // Removes all previous meta and adds new one\n")),(0,i.kt)("h3",{id:"remove-meta-parameters"},"Remove meta parameters"),(0,i.kt)("p",null,"In order to remove data just pass ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," as a value."),(0,i.kt)("p",null,"E.g. if you want to remove ",(0,i.kt)("inlineCode",{parentName:"p"},"keywords")," meta:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"(walker) =>\n  walker.updateMeta(30, {\n    keywords: null,\n  });\n")),(0,i.kt)("p",null,"After that specified meta tag will be remove"))}d.isMDXComponent=!0}}]);