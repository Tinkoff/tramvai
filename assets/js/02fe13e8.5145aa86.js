"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9073],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,d=u["".concat(c,".").concat(h)]||u[h]||m[h]||r;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5853:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={id:"how-create-async-component",title:"How to split a component into an asynchronous chunk?"},c=void 0,p={unversionedId:"how-to/how-create-async-component",id:"how-to/how-create-async-component",title:"How to split a component into an asynchronous chunk?",description:"tramvai supports splitting components into asynchronous chunks with rendering on the server and hydration on the client, using @tramvai/react",source:"@site/tmp-docs/how-to/how-create-async-component.md",sourceDirName:"how-to",slug:"/how-to/how-create-async-component",permalink:"/tramvai/docs/how-to/how-create-async-component",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/how-to/how-create-async-component.md",tags:[],version:"current",frontMatter:{id:"how-create-async-component",title:"How to split a component into an asynchronous chunk?"},sidebar:"sidebar",previous:{title:"How to create an action?",permalink:"/tramvai/docs/how-to/how-create-action"},next:{title:"How to create a bundle?",permalink:"/tramvai/docs/how-to/how-create-bundle"}},s={},m=[{value:"Component example",id:"component-example",level:2},{value:"Connecting the lazy",id:"connecting-the-lazy",level:2},{value:"Result",id:"result",level:2}],u={toc:m};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"tramvai supports splitting components into asynchronous chunks with rendering on the server and hydration on the client, using ",(0,r.kt)("a",{parentName:"p",href:"/tramvai/docs/references/tramvai/react#lazy"},(0,r.kt)("inlineCode",{parentName:"a"},"@tramvai/react"))),(0,r.kt)("h2",{id:"component-example"},"Component example"),(0,r.kt)("p",null,"Let's say we have a heavy React component that we use occasionally and we want to load it only when needed.\nRight now we have the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file heavy.tsx\nexport const Heavy = () => <div>123</div>;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file page.tsx\nimport Heavy from './heavy.tsx';\n\nconst Page = () => (\n  <>\n    <Heavy />\n    <Footer />\n  </>\n);\n")),(0,r.kt)("h2",{id:"connecting-the-lazy"},"Connecting the lazy"),(0,r.kt)("p",null,"There are several ways to split the component into asynchronous chunks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add new wrapper for ",(0,r.kt)("inlineCode",{parentName:"li"},"heavy")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"page.tsx"),"."),(0,r.kt)("li",{parentName:"ul"},"Put ",(0,r.kt)("inlineCode",{parentName:"li"},"heavy")," code into a separate file and leave only async wrapper in ",(0,r.kt)("inlineCode",{parentName:"li"},"heavy.tsx"),".")),(0,r.kt)("p",null,"We'll create a new file, as this allows us not to change imports in files that have already used the ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component. And it will be harder to forget to reuse the async component in the future:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file heavy-component.tsx\nexport const Heavy = () => <div>123</div>;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file heavy.tsx\nimport { lazy } from '@tramvai/react';\n\nexport const Heavy = lazy(() => import('./heavy-component'));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file page.tsx\nimport Heavy from './heavy.tsx';\n\nconst Page = () => (\n  <>\n    <Heavy />\n    <Footer />\n  </>\n);\n")),(0,r.kt)("p",null,"We created a new file, put all the code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component there, and left only the component itself in the old file, which we wrapped in ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy")," and imported the original component with ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),". Now instead of the original ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component we will have an asynchronous version which we will load only when rendering the ",(0,r.kt)("inlineCode",{parentName:"p"},"Page")," component."),(0,r.kt)("h2",{id:"result"},"Result"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component will be loaded by demand"),(0,r.kt)("p",null,"Next, the component will be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Automatically put in a separate webpack chunk"),(0,r.kt)("li",{parentName:"ul"},"When rendering, SSR will automatically download the file and immediately render it on the server"),(0,r.kt)("li",{parentName:"ul"},"JS and CSS of the chunk will be inserted into the HTML with maximum priority"),(0,r.kt)("li",{parentName:"ul"},"It will work seamlessly in the browser")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/tramvai/docs/how-to/ssr-async-components"},"Example of work in a test application")))}h.isMDXComponent=!0}}]);