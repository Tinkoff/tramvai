"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9841],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||i;return t?r.createElement(h,o(o({ref:n},d),{},{components:t})):r.createElement(h,o({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(7294),a=t(6010);const i="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>N});var r=t(7462),a=t(7294),i=t(6010),o=t(2466),l=t(6550),s=t(1980),u=t(7392),d=t(12);function p(e){return function(e){return a.Children.map(e,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function c(e){var n=e.values,t=e.children;return(0,a.useMemo)((function(){var e=null!=n?n:p(t);return function(e){var n=(0,u.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function h(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,i=(0,l.k6)(),o=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,s._X)(o),(0,a.useCallback)((function(e){if(o){var n=new URLSearchParams(i.location.search);n.set(o,e),i.replace(Object.assign({},i.location,{search:n.toString()}))}}),[o,i])]}function f(e){var n,t,r,i,o=e.defaultValue,l=e.queryString,s=void 0!==l&&l,u=e.groupId,p=c(e),f=(0,a.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:o,tabValues:p})})),v=f[0],k=f[1],g=h({queryString:s,groupId:u}),b=g[0],y=g[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,d.Nk)(n),r=t[0],i=t[1],[r,(0,a.useCallback)((function(e){n&&i.set(e)}),[n,i])]),N=w[0],C=w[1],x=function(){var e=null!=b?b:N;return m({value:e,tabValues:p})?e:null}();return(0,a.useLayoutEffect)((function(){x&&k(x)}),[x]),{selectedValue:v,selectValue:(0,a.useCallback)((function(e){if(!m({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);k(e),y(e),C(e)}),[y,C,p]),tabValues:p}}var v=t(2389);const k="tabList__CuJ",g="tabItem_LNqP";function b(e){var n=e.className,t=e.block,l=e.selectedValue,s=e.selectValue,u=e.tabValues,d=[],p=(0,o.o5)().blockElementScrollPositionUntilNextRender,c=function(e){var n=e.currentTarget,t=d.indexOf(n),r=u[t].value;r!==l&&(p(n),s(r))},m=function(e){var n,t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var r,a=d.indexOf(e.currentTarget)+1;t=null!=(r=d[a])?r:d[0];break;case"ArrowLeft":var i,o=d.indexOf(e.currentTarget)-1;t=null!=(i=d[o])?i:d[d.length-1]}null==(n=t)||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},u.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:function(e){return d.push(e)},onKeyDown:m,onClick:c},o,{className:(0,i.Z)("tabs__item",g,null==o?void 0:o.className,{"tabs__item--active":l===n})}),null!=t?t:n)})))}function y(e){var n=e.lazy,t=e.children,r=e.selectedValue;if(t=Array.isArray(t)?t:[t],n){var i=t.find((function(e){return e.props.value===r}));return i?(0,a.cloneElement)(i,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},t.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})})))}function w(e){var n=f(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",k)},a.createElement(b,(0,r.Z)({},e,n)),a.createElement(y,(0,r.Z)({},e,n)))}function N(e){var n=(0,v.Z)();return a.createElement(w,(0,r.Z)({key:String(n)},e))}},1566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>u,metadata:()=>p,toc:()=>m});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=t(4866),l=t(5162),s=["components"],u={},d=void 0,p={unversionedId:"references/modules/client-hints",id:"references/modules/client-hints",title:"client-hints",description:"Module provides various parameters from the client device, e.g. type of the device, screen size, etc.",source:"@site/tmp-docs/references/modules/client-hints.md",sourceDirName:"references/modules",slug:"/references/modules/client-hints",permalink:"/docs/references/modules/client-hints",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/modules/client-hints.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"child-app",permalink:"/docs/references/modules/child-app"},next:{title:"common",permalink:"/docs/references/modules/common"}},c={},m=[{value:"Installation",id:"installation",level:2},{value:"Explanation",id:"explanation",level:2},{value:"The problem with media on server and on client",id:"the-problem-with-media-on-server-and-on-client",level:3},{value:"Server-side rendering",id:"server-side-rendering",level:3},{value:"Client-side rendering",id:"client-side-rendering",level:3},{value:"How does media work",id:"how-does-media-work",level:3},{value:"First page loading",id:"first-page-loading",level:4},{value:"Next page loads",id:"next-page-loads",level:4},{value:"Use ClientHints in component",id:"use-clienthints-in-component",level:4},{value:"Api",id:"api",level:2},{value:"Stores",id:"stores",level:3},{value:"userAgent",id:"useragent",level:4},{value:"media",id:"media",level:4},{value:"media helpers",id:"media-helpers",level:3},{value:"How to",id:"how-to",level:2},{value:"Render skeleton only when user loads pages first time",id:"render-skeleton-only-when-user-loads-pages-first-time",level:3},{value:"Render adaptive component on first time and on subsequent loads render specific component",id:"render-adaptive-component-on-first-time-and-on-subsequent-loads-render-specific-component",level:3},{value:"Exported tokens",id:"exported-tokens",level:2},{value:"USER_AGENT_TOKEN",id:"user_agent_token",level:3}],h={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Module provides various parameters from the client device, e.g. type of the device, screen size, etc."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"First, install ",(0,i.kt)("inlineCode",{parentName:"p"},"@tramvai/module-client-hints")),(0,i.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @tramvai/module-client-hints\n"))),(0,i.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn i --save @tramvai/module-client-hints\n# couldn't auto-convert command\n")))),(0,i.kt)("p",null,"Then add ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientHintsModule")," to the modules list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp } from '@tramvai/core';\nimport { ClientHintsModule } from '@tramvai/module-client-hints';\n\ncreateApp({\n  modules: [ClientHintsModule],\n});\n")),(0,i.kt)("p",null,"It will enable server side user agent parsing. If you are using ",(0,i.kt)("a",{parentName:"p",href:"/docs/features/rendering/csr#csr-fallback"},"CSR fallback")," feature, then you should use ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientHintsCSRModule")," from this package instead."),(0,i.kt)("h2",{id:"explanation"},"Explanation"),(0,i.kt)("h3",{id:"the-problem-with-media-on-server-and-on-client"},"The problem with media on server and on client"),(0,i.kt)("p",null,"One of the SSR problem is render of the component which depends on current screen size, e.g. image carousel that should render specific number of images depending on screen width. By default, the exact screen size can be figured out only on client-side and we can't render such content on server identical to the client render. If this content is not important for the SEO we can use skeletons and spinners, but they are not suitable for every case."),(0,i.kt)("p",null,"Client Hints modules provides the way to solve this problem in some way. It stores data about client devices in cookies and then use these cookies on server in next page loading."),(0,i.kt)("h3",{id:"server-side-rendering"},"Server-side rendering"),(0,i.kt)("p",null,"Module will parse client hints/user agent only on the server by default. Parsing is implemented with library ",(0,i.kt)("a",{parentName:"p",href:"/docs/references/libs/user-agent"},"@tinkoff/user-agent")," that may use either user-agent header or client-hints headers."),(0,i.kt)("p",null,"If there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"sec-ch-ua")," header in request than user agent parsing will be based on ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Client_hints"},"Client Hints")," headers. If there is no such header than old school parsing of user-agent string will be used."),(0,i.kt)("p",null,"This logic implies next things worth to mention:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"by default, only part of client-hints is sent by browser and you can get only partial info about user browser (no cpu spec, platform version or device model). Although, we send an additional header ",(0,i.kt)("inlineCode",{parentName:"li"},"accept-ch")," with response from server to request this data from client - on first request from current browser there will be no such data in any case and they will appear only on subsequent requests"),(0,i.kt)("li",{parentName:"ul"},"if you need to use additional info, you may specify the header ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-CH"},(0,i.kt)("inlineCode",{parentName:"a"},"accept-ch"))," in your app with ",(0,i.kt)("inlineCode",{parentName:"li"},"REQUEST_MANAGER_TOKEN")),(0,i.kt)("li",{parentName:"ul"},"client-hints is mostly more performant way to parse browser info and this is way it used if it's possible"),(0,i.kt)("li",{parentName:"ul"},"currently only chromium based browsers support client hints, so for other browsers and bots user-agent header will be used to gather browser info")),(0,i.kt)("h3",{id:"client-side-rendering"},"Client-side rendering"),(0,i.kt)("p",null,"If you want to parse user agent ",(0,i.kt)("a",{parentName:"p",href:"/docs/features/rendering/csr#csr-fallback"},"on the client"),", then you should use ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientHintsCSRModule"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp } from '@tramvai/core';\nimport { ClientHintsCSRModule } from '@tramvai/module-client-hints';\n\ncreateApp({\n  modules: [ClientHintsCSRModule],\n  // Also, there will be no conflict with ClientHintsModule, but ClientHintsCSRModule must be registered after ClientHintsModule strictly.\n  // modules: [ClientHintsModule, ClientHintsCSRModule],\n});\n")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientHintsCSRModule")," will increase bundle size for ~ 18kb raw and 8kb gzip")),(0,i.kt)("h3",{id:"how-does-media-work"},"How does media work"),(0,i.kt)("h4",{id:"first-page-loading"},"First page loading"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"When user enters the app for the first time, information about ",(0,i.kt)("strong",{parentName:"p"},"real")," device screen size and type ",(0,i.kt)("strong",{parentName:"p"},"not available")," in server-side code.")),(0,i.kt)("p",null,"This module tries to determine type of the user device using user-agent string, and separates the devices into three groups:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mobile")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tablet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"desktop"))),(0,i.kt)("p",null,"Then it saves this ",(0,i.kt)("strong",{parentName:"p"},"assumptive")," information about device screen to ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store. E.g. when user loads page from the desktop, then content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store will be following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const state = {\n  // desktop - 1024px, tablet - 600px, mobile - 300px\n  width: 1024,\n  // desktop - 768px, tablet - 800px, mobile - 500px\n  height: 768,\n  // desktop - false, tablet - true, mobile - true\n  isTouch: false,\n  retina: false,\n  supposed: true,\n  synchronized: false,\n};\n")),(0,i.kt)("p",null,"On the client focusing on value ",(0,i.kt)("inlineCode",{parentName:"p"},"supposed: true")," module resolves ",(0,i.kt)("strong",{parentName:"p"},"real")," info about client device, updates ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store and calls the rerender for the dependent components. E.g. for the widescreen monitor the data of ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store might be next:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const state = {\n  width: 1920,\n  height: 1080,\n  isTouch: false,\n  retina: true,\n  supposed: false,\n  synchronized: false,\n};\n")),(0,i.kt)("p",null,"While we have value ",(0,i.kt)("inlineCode",{parentName:"p"},"synchronized: false")," ",(0,i.kt)("strong",{parentName:"p"},"it is not allowed")," to use data from the ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store for on the server-side as data is not synchronized with the client and it will lead to page jumps when saving real data about device."),(0,i.kt)("h4",{id:"next-page-loads"},"Next page loads"),(0,i.kt)("p",null,"When user loads the app next time the data about user device will be read from cookies and value ",(0,i.kt)("inlineCode",{parentName:"p"},"synchronized")," will be set to true. This way on server and on client we will get the same content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store and no page rerenders on the client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const state = {\n  width: 1920,\n  height: 1080,\n  isTouch: false,\n  retina: true,\n  supposed: false,\n  synchronized: true,\n};\n")),(0,i.kt)("h4",{id:"use-clienthints-in-component"},"Use ClientHints in component"),(0,i.kt)("p",null,"If some component depends on the screen size:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"When user loads app for the first time ",(0,i.kt)("strong",{parentName:"li"},"is not possible")," to guarantee the same exact render on server and client"),(0,i.kt)("li",{parentName:"ol"},"On first app load you may show some skeleton to the user by checking ",(0,i.kt)("inlineCode",{parentName:"li"},"supposed: true")," property"),(0,i.kt)("li",{parentName:"ol"},"You can guarantee the same exact render on server and client only in case ",(0,i.kt)("inlineCode",{parentName:"li"},"synchronized: true"))),(0,i.kt)("h2",{id:"api"},"Api"),(0,i.kt)("h3",{id:"stores"},"Stores"),(0,i.kt)("h4",{id:"useragent"},"userAgent"),(0,i.kt)("p",null,"Stores the result of the user-agent string or client-hints headers parsing."),(0,i.kt)("h4",{id:"media"},"media"),(0,i.kt)("p",null,"Stores the media information about type and size of the client screen."),(0,i.kt)("h3",{id:"media-helpers"},"media helpers"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"media")," store has next data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"type Media = {\n  width: number;\n  height: number;\n  isTouch: boolean;\n  retina: boolean;\n  supposed?: boolean;\n  synchronized?: boolean;\n};\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fromClientHints(media: Media): boolean")," - returns true if media data is synchronized on client and server"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"isSupposed(media: Media): boolean")," - returns true if media data are determined on server by the user-agent string and will be changes on the client"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"isRetina(media: Media): boolean")," - returns true if pixel density is equal to 2 or higher"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useMedia(): Media")," - returns current state of the ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," store"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useFromClientHints(): boolean")," - calculates fromClientHints"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useIsSupposed(): boolean")," - calculates isSupposed"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useIsRetina(): boolean")," - calculates isRetina"),(0,i.kt)("h2",{id:"how-to"},"How to"),(0,i.kt)("h3",{id:"render-skeleton-only-when-user-loads-pages-first-time"},"Render skeleton only when user loads pages first time"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const isSupposed = useIsSupposed();\n\n  if (isSupposed) {\n    return <AdaptiveSliderSkeleton />;\n  }\n\n  return <AdaptiveSlider />;\n};\n")),(0,i.kt)("h3",{id:"render-adaptive-component-on-first-time-and-on-subsequent-loads-render-specific-component"},"Render adaptive component on first time and on subsequent loads render specific component"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const media = useMedia();\n  const fromClientHints = useFromClientHints();\n\n  let Block = AdaptiveBlock;\n\n  if (fromClientHints) {\n    Block = media.width >= 1024 ? DesktopBlock : MobileBlock;\n  }\n\n  return <Block />;\n};\n")),(0,i.kt)("h2",{id:"exported-tokens"},"Exported tokens"),(0,i.kt)("h3",{id:"user_agent_token"},"USER_AGENT_TOKEN"),(0,i.kt)("p",null,"Object as a result of parsing user-agent string with ",(0,i.kt)("a",{parentName:"p",href:"/docs/references/libs/user-agent"},"@tinkoff/user-agent"),". Parsing happens only on server-side and parsed info is reused on client-side."))}f.isMDXComponent=!0}}]);