"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4806],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(k,i(i({ref:n},u),{},{components:t})):r.createElement(k,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(7462),a=t(7294),o=t(6010),i=t(2389),l=t(7392),s=t(7094),p=t(2466);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){var n,t,i=e.lazy,c=e.block,m=e.defaultValue,k=e.values,v=e.groupId,f=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=k?k:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,l.l)(h,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===m?m:null!=(n=null!=m?m:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:g[0].props.value;if(null!==N&&!h.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,s.U)(),T=b.tabGroupChoices,O=b.setTabGroupChoices,E=(0,a.useState)(N),C=E[0],I=E[1],w=[],S=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=v){var x=T[v];null!=x&&x!==C&&h.some((function(e){return e.value===x}))&&I(x)}var D=function(e){var n=e.currentTarget,t=w.indexOf(n),r=h[t].value;r!==C&&(S(n),I(r),null!=v&&O(v,String(r)))},M=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,a=w.indexOf(e.currentTarget)+1;t=null!=(r=w[a])?r:w[0];break;case"ArrowLeft":var o,i=w.indexOf(e.currentTarget)-1;t=null!=(o=w[i])?o:w[w.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},f)},h.map((function(e){var n=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return w.push(e)},onKeyDown:M,onFocus:D,onClick:D},i,{className:(0,o.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),i?(0,a.cloneElement)(g.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function m(e){var n=(0,i.Z)();return a.createElement(c,(0,r.Z)({key:String(n)},e))}},4864:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>v,frontMatter:()=>p,metadata:()=>d,toc:()=>m});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=t(5488),l=t(5162),s=["components"],p={},u=void 0,d={unversionedId:"references/libs/dippy",id:"references/libs/dippy",title:"dippy",description:"Inversion of Control pattern implementation",source:"@site/tmp-docs/references/libs/dippy.md",sourceDirName:"references/libs",slug:"/references/libs/dippy",permalink:"/tramvai/docs/references/libs/dippy",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/libs/dippy.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"cookies",permalink:"/tramvai/docs/references/libs/cookies"},next:{title:"env-validators",permalink:"/tramvai/docs/references/libs/env-validators"}},c={},m=[{value:"Explanation",id:"explanation",level:2},{value:"Dependency",id:"dependency",level:3},{value:"Container",id:"container",level:3},{value:"Token",id:"token",level:3},{value:"Provider",id:"provider",level:3},{value:"Module",id:"module",level:3},{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Quick start",id:"quick-start",level:3},{value:"API",id:"api",level:3},{value:"Token",id:"token-1",level:4},{value:"createToken(name, options)",id:"createtokenname-options",level:5},{value:"typeof token",id:"typeof-token",level:5},{value:"Container",id:"container-1",level:4},{value:"createContainer(providers)",id:"createcontainerproviders",level:5},{value:"initContainer({ modules, providers })",id:"initcontainer-modules-providers-",level:5},{value:"container.get(token)",id:"containergettoken",level:5},{value:"container.register(provider)",id:"containerregisterprovider",level:5},{value:"Child container",id:"child-container",level:4},{value:"Quick start",id:"quick-start-1",level:5},{value:"Scope",id:"scope",level:5},{value:"Module",id:"module-1",level:3},{value:"@Module({ providers, deps, imports })(class)",id:"module-providers-deps-imports-class",level:4},{value:"Usage",id:"usage-1",level:4},{value:"declareModule",id:"declaremodule",level:3},{value:"declareModule({ name, providers, imports, extend })",id:"declaremodule-name-providers-imports-extend-",level:4},{value:"Usage",id:"usage-2",level:4}],k={toc:m};function v(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Inversion of Control pattern implementation"),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"dippy")," brings Dependency Injection system to your applications.\nDependency Injection provides a powerful way to make applications modular, flexible and extensible."),(0,o.kt)("h3",{id:"dependency"},"Dependency"),(0,o.kt)("p",null,"Dependency is a peace of code that has a specific purpose - primitive value, object, class instance."),(0,o.kt)("h3",{id:"container"},"Container"),(0,o.kt)("p",null,"Container contains information about dependencies, connections between them, and already created instances of dependencies"),(0,o.kt)("h3",{id:"token"},"Token"),(0,o.kt)("p",null,"Token represents a dependency by unique key and typed interface"),(0,o.kt)("h3",{id:"provider"},"Provider"),(0,o.kt)("p",null,"Provider provides dependency implementation by token, and indicates connections between other dependencies"),(0,o.kt)("h3",{id:"module"},"Module"),(0,o.kt)("p",null,"Module provides a list of providers and can connect other modules"),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Dynamic initialization"),(0,o.kt)("li",{parentName:"ul"},"Replacing implementations"),(0,o.kt)("li",{parentName:"ul"},"Multi tokens"),(0,o.kt)("li",{parentName:"ul"},"Child containers"),(0,o.kt)("li",{parentName:"ul"},"Modules"),(0,o.kt)("li",{parentName:"ul"},"Lightweight"),(0,o.kt)("li",{parentName:"ul"},"Does not use ",(0,o.kt)("inlineCode",{parentName:"li"},"reflect-metadata")," and decorators"),(0,o.kt)("li",{parentName:"ul"},"Circular dependency safe"),(0,o.kt)("li",{parentName:"ul"},"Easy to debug")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @tinkoff/dippy\n"))),(0,o.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @tinkoff/dippy\n")))),(0,o.kt)("h3",{id:"quick-start"},"Quick start"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  createContainer,\n  createToken,\n  provide,\n} from '@tinkoff/dippy';\n\nconst COUNTER = createToken<{ value: number }>('counter');\nconst MULTIPLIER = createToken<{ value: number }>('multiplier');\n\nconst providers = [\n  provide({\n    provide: COUNTER,\n    useValue: { value: 2 },\n  }),\n  provide({\n    provide: MULTIPLIER,\n    useFactory(deps) {\n      return {\n        value: deps.counter.value * 2,\n      };\n    },\n    deps: {\n      counter: COUNTER,\n    },\n  }),\n];\n\nconst container = createContainer(providers);\n\nconsole.log(container.get(MULTIPLIER)); // 4\n")),(0,o.kt)("h3",{id:"api"},"API"),(0,o.kt)("h4",{id:"token-1"},"Token"),(0,o.kt)("h5",{id:"createtokenname-options"},"createToken(name, options)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createToken")," method creates token - both key and interface for dependency.\n",(0,o.kt)("inlineCode",{parentName:"p"},"name")," argument - string key, name of the dependency.\nOptional ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," argument - specific token parameters."),(0,o.kt)("p",null,"Basic example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const FOO_TOKEN = createToken<{ key: string }>('foo');\n")),(0,o.kt)("p",null,"Multi token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const FOO_LIST_TOKEN = createToken<{ key: string }>('foo list', { multi: true });\n")),(0,o.kt)("h5",{id:"typeof-token"},"typeof token"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createToken")," returns type of the dependency, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const FOO_TOKEN = createToken<{ key: string }>('foo');\n\n// { key: string }\ntype InferedFooType = typeof FOO_TOKEN;\n")),(0,o.kt)("h4",{id:"container-1"},"Container"),(0,o.kt)("h5",{id:"createcontainerproviders"},"createContainer(providers)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createContainer")," method is used to create an instance of the container.\nOptional ",(0,o.kt)("inlineCode",{parentName:"p"},"provider")," argument - list of default providers."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createContainer } from '@tinkoff/dippy';\n\nconst container = createContainer([]);\n")),(0,o.kt)("h5",{id:"initcontainer-modules-providers-"},"initContainer({ modules, providers })"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"initContainer")," method is a wrapper over ",(0,o.kt)("inlineCode",{parentName:"p"},"createContainer")," method and used to create an instance of the container and walk over all modules."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { initContainer } from '@tinkoff/dippy';\n\nconst di = initContainer({\n  modules: [],\n  providers: [],\n});\n")),(0,o.kt)("h5",{id:"containergettoken"},"container.get(token)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"get")," method returns resolved dependency instance or resolves this token with his dependencies."),(0,o.kt)("p",null,"Basic example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// string\nconst foo = container.get(FOO_TOKEN);\n")),(0,o.kt)("p",null,"Optional dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { optional } from '@tinkoff/dippy';\n\n// with special `optional` utility\n// `string` | `null` if not found\nconst foo1 = container.get(optional(FOO_TOKEN));\n\n// without `optional` utility\n// `string` | `null` if not found\nconst foo2 = container.get({ token: FOO_TOKEN, optional: true });\n")),(0,o.kt)("p",null,"Multi token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const LIST_TOKEN = createToken<{ key: string }>('list', { multi: true });\n\n// { key: string }[]\nconst list = container.get(LIST_TOKEN);\n")),(0,o.kt)("p",null,"Multi optional token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const LIST_TOKEN = createToken<{ key: string }>('list', { multi: true });\n\n// `{ key: string }[]` | empty `[]` if not found\nconst list = container.get(optional(LIST_TOKEN));\n")),(0,o.kt)("h5",{id:"containerregisterprovider"},"container.register(provider)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"register")," method saves provider for token, and can overwrite previous registered provider for the same token."),(0,o.kt)("p",null,"Value provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"container.register({\n  provide: FOO_TOKEN,\n  useValue: { key: 'a' },\n});\n")),(0,o.kt)("p",null,"Multi provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const LIST_TOKEN = createToken<{ key: string }>('list', { multi: true });\n\ncontainer.register({\n  provide: LIST_TOKEN,\n  multi: true,\n  useValue: { key: 'a' },\n});\n\ncontainer.register({\n  provide: LIST_TOKEN,\n  multi: true,\n  useValue: [{ key: 'b' }, { key: 'c' }],\n});\n\nconsole.log(container.get(LIST_TOKEN)); // [{ key: 'a' }, { key: 'b' }, { key: 'c' }]\n")),(0,o.kt)("p",null,"Factory provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"container.register({\n  provide: BAR_TOKEN,\n  useFactory(deps) {\n    return `${deps.foo} Bar`;\n  },\n  deps: {\n    foo: FOO_TOKEN,\n  },\n})\n")),(0,o.kt)("p",null,"Class provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Bar {\n  constructor(private foo: string) {}\n}\n\ncontainer.register({\n  provide: BAR_TOKEN,\n  useClass: Bar,\n  deps: {\n    foo: FOO_TOKEN,\n  },\n})\n")),(0,o.kt)("h4",{id:"child-container"},"Child container"),(0,o.kt)("p",null,"It is enough to have only one DI container for client SPA applications.\nBut for server-side applications (SSR or API, no difference), you may need to create unique container for every request into the application.\nFor this reason, ",(0,o.kt)("inlineCode",{parentName:"p"},"dippy"),' provides ability to "fork" root DI container, which allows us to reuse providers from root container, and even providers implementations, if they were registered in ',(0,o.kt)("inlineCode",{parentName:"p"},"Scope.SINGLETON"),"."),(0,o.kt)("h5",{id:"quick-start-1"},"Quick start"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import express from 'express';\nimport type { Request, Response } from 'express';\nimport {\n  createContainer,\n  createToken,\n  provide,\n  Scope,\n} from '@tinkoff/dippy';\n\nconst app = express();\nconst rootDi = createContainer();\n\nconst LOGGER = createToken<Console>('logger');\nconst REQUEST = createToken<Request>('request');\nconst RESPONSE = createToken<Response>('response');\n\nrootDi.register({\n  provide: LOGGER,\n  scope: Scope.SINGLETON,\n  useFactory() {\n    // will be executed only once\n    return console;\n  },\n})\n\napp.get('/', (req, res) => {\n  const childDI = createChildContainer(rootDi);\n  // the same logger for every request\n  const logger = childDI.get(LOGGER);\n\n  // unique req object for request\n  childDI.register({\n    provide: REQUEST,\n    useValue: req,\n  });\n  // unique res object for request\n  childDI.register({\n    provide: RESPONSE,\n    useValue: res,\n  });\n\n  res.send('Hello World!');\n});\n")),(0,o.kt)("h5",{id:"scope"},"Scope"),(0,o.kt)("p",null,"Enum ",(0,o.kt)("inlineCode",{parentName:"p"},"Scope")," has two values - ",(0,o.kt)("inlineCode",{parentName:"p"},"REQUEST")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SINGLETON"),".\nDefault value for every provider is ",(0,o.kt)("inlineCode",{parentName:"p"},"REQUEST"),".\nIf provider from parent DI has scope ",(0,o.kt)("inlineCode",{parentName:"p"},"REQUEST"),", every child DI will resolve own implementation of this provider.\nIf provider has scope ",(0,o.kt)("inlineCode",{parentName:"p"},"SINGLETON"),", every child DI will reuse the same resolved implementation of this provider from parent DI."),(0,o.kt)("p",null,"Basic example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"container.register({\n  provide: FOO_TOKEN,\n  useValue: { foo: 'bar' },\n});\n")),(0,o.kt)("p",null,"Singleton example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"container.register({\n  provide: FOO_TOKEN,\n  scope: Scope.SINGLETON,\n  useValue: { foo: 'bar' },\n});\n")),(0,o.kt)("h3",{id:"module-1"},"Module"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Module")," - Decorator for configuring and creating a module."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/tramvai/docs/concepts/module"},"Read more about modules")),(0,o.kt)("h4",{id:"module-providers-deps-imports-class"},"@Module({ providers, deps, imports })(class)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"providers")," - ",(0,o.kt)("a",{parentName:"li",href:"/tramvai/docs/concepts/provider"},"Providers"),", which will be added to the root DI container and become available in other modules"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"deps")," - List of dependencies from the DI container, necessary to initialize the module"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"imports")," - A list of modules from which providers will be obtained and added to the DI. Allows you to create modules that combine many other modules")),(0,o.kt)("h4",{id:"usage-1"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Module, provide } from '@tinkoff/dippy';\n\n@Module({\n  providers: [\n    provide({\n      provide: 'token',\n      useValue: 'value-in-token',\n    }),\n  ],\n  deps: {\n    logger: 'logger',\n  },\n  imports: [ModuleLogger],\n})\nclass ModulePubSub {\n  constructor({ logger }) {\n    logger.info('Module created');\n  }\n}\n")),(0,o.kt)("h3",{id:"declaremodule"},"declareModule"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"declareModule")," - factory for configuring and creating a module."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/tramvai/docs/concepts/module"},"Read more about modules")),(0,o.kt)("h4",{id:"declaremodule-name-providers-imports-extend-"},"declareModule({ name, providers, imports, extend })"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name")," - Unique module name"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"providers")," - ",(0,o.kt)("a",{parentName:"li",href:"/tramvai/docs/concepts/provider"},"Providers"),", which will be added to the root DI container and become available in other modules"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"imports")," - A list of modules from which providers will be obtained and added to the DI. Allows you to create modules that combine many other modules"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"extend")," - A list of module configuration methods")),(0,o.kt)("h4",{id:"usage-2"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { declareModule, provide } from '@tinkoff/dippy';\n\nconst ModulePubSub = declareModule({\n  name: 'PubSub',\n  imports: [ModuleLogger],\n  providers: [\n    provide({\n      provide: 'token',\n      useValue: 'value-in-token',\n    }),\n  ],\n  extend: {\n    forRoot(tokenValue: string) {\n      return [\n        provide({\n          provide: 'token',\n          useValue: tokenValue,\n        }),\n      ];\n    },\n  },\n});\n\n// use ModulePubSub or ModulePubSub.forRoot('new value')\n")))}v.isMDXComponent=!0}}]);