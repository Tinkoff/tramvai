"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5354],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=i,k=u["".concat(m,".").concat(c)]||u[c]||d[c]||r;return a?n.createElement(k,o(o({ref:t},s),{},{components:a})):n.createElement(k,o({ref:t},s))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8480:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>m,default:()=>c,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],l={id:"seo",title:"SEO and Meta"},m=void 0,p={unversionedId:"features/seo",id:"features/seo",title:"SEO and Meta",description:"Explanation",source:"@site/tmp-docs/03-features/013-seo.md",sourceDirName:"03-features",slug:"/features/seo",permalink:"/docs/features/seo",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/03-features/013-seo.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{id:"seo",title:"SEO and Meta"},sidebar:"sidebar",previous:{title:"Images and Fonts",permalink:"/docs/features/assets"},next:{title:"Logging",permalink:"/docs/features/logging"}},s={},d=[{value:"Explanation",id:"explanation",level:2},{value:"Meta tags",id:"meta-tags",level:3},{value:"Data sources",id:"data-sources",level:3},{value:"Meta priority",id:"meta-priority",level:3},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Default meta",id:"default-meta",level:3},{value:"Route meta",id:"route-meta",level:3},{value:"Custom data source",id:"custom-data-source",level:3},{value:"Dynamic meta",id:"dynamic-meta",level:3},{value:"How-to",id:"how-to",level:2},{value:"How to set a custom meta tag?",id:"how-to-set-a-custom-meta-tag",level:3},{value:"How-to remove meta tag?",id:"how-to-remove-meta-tag",level:3},{value:"References",id:"references",level:2},{value:"Meta tags list",id:"meta-tags-list",level:3},{value:"Custom meta tags",id:"custom-meta-tags",level:3},{value:"Testing",id:"testing",level:2},{value:"Testing work with META_UPDATER_TOKEN and META_DEFAULT_TOKEN",id:"testing-work-with-meta_updater_token-and-meta_default_token",level:3}],u={toc:d};function c(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("p",null,"A separate module responsible for meta tags generation - ",(0,r.kt)("inlineCode",{parentName:"p"},"SeoModule")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/module-seo")," package."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#data-sources"},"Data for meta tags")," can be defined globally, for the all application pages, or only for a specific routes."),(0,r.kt)("p",null,"All meta have a ",(0,r.kt)("a",{parentName:"p",href:"#meta-priority"},"priority")," and the data with highest priority will be used."),(0,r.kt)("h3",{id:"meta-tags"},"Meta tags"),(0,r.kt)("p",null,"Meta tags in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," application represented as a ",(0,r.kt)("inlineCode",{parentName:"p"},"key: value")," object, where key is a name of the meta tag from ",(0,r.kt)("a",{parentName:"p",href:"#meta-tags-list"},"predefined list")),(0,r.kt)("h3",{id:"data-sources"},"Data sources"),(0,r.kt)("p",null,"Meta tags will be generated per every page request, and based on different data sources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#default-meta"},"Default meta pack"),", static and will be used for all pages"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#route-meta"},"Meta from route configuration"),", static and will be used for specific route"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#custom-data-source"},"Custom data source"),", when you need to get data from different places (services, stores, etc.)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dynamic-meta"},"Dynamic meta"),", can be changed in ",(0,r.kt)("a",{parentName:"li",href:"/docs/features/data-fetching/action"},"Actions")," or ",(0,r.kt)("a",{parentName:"li",href:"/docs/features/app-lifecycle"},"CommandLineRunner steps"))),(0,r.kt)("h3",{id:"meta-priority"},"Meta priority"),(0,r.kt)("p",null,"There is a three predefined priority levels, and you can always use custom:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," - used for ",(0,r.kt)("a",{parentName:"li",href:"#default-meta"},"default meta"),", available in constant ",(0,r.kt)("inlineCode",{parentName:"li"},"META_PRIORITY_DEFAULT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"10")," - used for ",(0,r.kt)("a",{parentName:"li",href:"#route-meta"},"meta from route config"),", available in constant ",(0,r.kt)("inlineCode",{parentName:"li"},"META_PRIORITY_ROUTE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"20")," - highest priority, intended for custom usage in application, usually for ",(0,r.kt)("a",{parentName:"li",href:"#dynamic-meta"},"dynamic meta"),", available in constant ",(0,r.kt)("inlineCode",{parentName:"li"},"META_PRIORITY_APP")," ")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Be sure that you have installed and connected ",(0,r.kt)("inlineCode",{parentName:"p"},"SeoModule")," (already included in new projects):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx tramvai add @tramvai/module-seo\n")),(0,r.kt)("p",null,"And connect in the project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp } from '@tramvai/core';\nimport { SeoModule } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [SeoModule],\n});\n")),(0,r.kt)("h3",{id:"default-meta"},"Default meta"),(0,r.kt)("p",null,"You can set default meta pack by using the method ",(0,r.kt)("inlineCode",{parentName:"p"},"SeoModule.forRoot")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"metaDefault")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp } from '@tramvai/core';\nimport { SeoModule } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [\n    SeoModule.forRoot({\n      metaDefault: {\n        title: 'Tramvai application',\n      },\n    })\n  ],\n});\n")),(0,r.kt)("p",null,"Another way is to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"META_DEFAULT_TOKEN")," token directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp, provide } from '@tramvai/core';\nimport { SeoModule, META_DEFAULT_TOKEN } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [SeoModule],\n  providers: [\n    provide({\n      provide: META_DEFAULT_TOKEN,\n      useValue: {\n        title: 'Tramvai application',\n      },\n    }),\n  ],\n});\n")),(0,r.kt)("h3",{id:"route-meta"},"Route meta"),(0,r.kt)("p",null,"Simplest way to set meta for specific route is to use static ",(0,r.kt)("inlineCode",{parentName:"p"},"seo")," property of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/pages"},"page component"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import type { PageComponent } from '@tramvai/react';\n\nconst CommentsPage: PageComponent = () => <h1>Comments Page</h1>;\n\nCommentsPage.seo = {\n  metaTags: {\n    title: 'Comments Page Title',\n  },\n};\n\nexport default CommentsPage;\n")),(0,r.kt)("p",null,"Another way, for ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/pages#define-routes-manually"},"manually created routes")," is to update route ",(0,r.kt)("inlineCode",{parentName:"p"},"config.seo")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const route = {\n  name: 'comments',\n  path: '/comments/',\n  config: {\n    pageComponent: '@/pages/comments',\n    seo: {\n      metaTags: {\n        title: 'Comments Page Title',\n      },\n    },\n  },\n}\n")),(0,r.kt)("h3",{id:"custom-data-source"},"Custom data source"),(0,r.kt)("p",null,"You can set additional data source by using the method ",(0,r.kt)("inlineCode",{parentName:"p"},"SeoModule.forRoot")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"metaUpdaters")," option."),(0,r.kt)("p",null,"Each source is a function that takes a meta and allows you to extend the meta through a ",(0,r.kt)("inlineCode",{parentName:"p"},"updateMeta")," call. The priority is a positive number, for each specific meta key the value with the highest priority will be used, the value with priority ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," denotes the default value."),(0,r.kt)("p",null,"This meta update will be executed for every request for application pages. Possible use-case - read information for meta from some services or stores (this information need to be already fetched, meta updaters are syncronyous)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp } from '@tramvai/core';\nimport { SeoModule, META_PRIORITY_ROUTE } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [\n    SeoModule.forRoot({\n      metaUpdaters: [\n        (meta) => {\n          meta.updateMeta(META_PRIORITY_ROUTE, {\n            ogTitle: 'Tramvai application',\n          });\n        },\n      ],\n    })\n  ],\n});\n")),(0,r.kt)("p",null,"Another way is to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"META_UPDATER_TOKEN")," token directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp, provide } from '@tramvai/core';\nimport { SeoModule, META_UPDATER_TOKEN, META_PRIORITY_ROUTE } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [SeoModule],\n  providers: [\n    provide({\n      provide: META_UPDATER_TOKEN,\n      useValue: (meta) => {\n        meta.updateMeta(META_PRIORITY_ROUTE, {\n          ogTitle: 'Tramvai application',\n        });\n      },\n    }),\n  ],\n});\n")),(0,r.kt)("h3",{id:"dynamic-meta"},"Dynamic meta"),(0,r.kt)("p",null,"For example, your meta depends on API response. ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/data-fetching/action"},"Actions")," is a good place to both save response to store and update meta tags by using ",(0,r.kt)("inlineCode",{parentName:"p"},"META_WALK_TOKEN")," \u0442\u043e\u043a\u0435\u043d:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { declareAction } from '@tramvai/core';\nimport { META_WALK_TOKEN, META_PRIORITY_APP } from '@tramvai/module-seo';\n\ndeclareAction({\n  name: 'action',\n  fn() {\n    this.deps.meta.updateMeta(META_PRIORITY_APP, {\n      title: 'WoW, such dynamic!',\n    });\n  },\n  deps: {\n    meta: META_WALK_TOKEN,\n  },\n  conditions: {\n    always: true,\n  },\n});\n")),(0,r.kt)("h2",{id:"how-to"},"How-to"),(0,r.kt)("h3",{id:"how-to-set-a-custom-meta-tag"},"How to set a custom meta tag?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#custom-meta-tags"},"Custom meta tag description"),", usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp, provide } from '@tramvai/core';\nimport { SeoModule, META_UPDATER_TOKEN, META_PRIORITY_ROUTE } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [SeoModule],\n  providers: [\n    provide({\n      provide: META_UPDATER_TOKEN,\n      useValue: (meta) => {\n        meta.updateMeta(META_PRIORITY_ROUTE, {\n          metaCustom: {\n            tag: 'meta',\n            attributes: {\n              name: 'metaCustomNameAttribute',\n              content: 'metaCustomContent',\n            },\n          },\n        });\n      },\n    }),\n  ],\n});\n")),(0,r.kt)("p",null,"And result will be - ",(0,r.kt)("inlineCode",{parentName:"p"},'<meta name="metaCustomNameAttribute" content="metaCustomContent" data-meta-dynamic="true">')),(0,r.kt)("h3",{id:"how-to-remove-meta-tag"},"How-to remove meta tag?"),(0,r.kt)("p",null,"Just return ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as value for highest priority:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp, provide } from '@tramvai/core';\nimport { SeoModule, META_UPDATER_TOKEN, META_PRIORITY_ROUTE } from '@tramvai/module-seo';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [SeoModule],\n  providers: [\n    provide({\n      provide: META_UPDATER_TOKEN,\n      useValue: (meta) => {\n        meta.updateMeta(30, {\n          keywords: null,\n        });\n      },\n    }),\n  ],\n});\n")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("h3",{id:"meta-tags-list"},"Meta tags list"),(0,r.kt)("p",null,"Predefined list for easy adding meta tags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"title")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"<title>")," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="description">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keywords")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="keywords">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"canonical")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<link rel="canonical">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"viewport")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="viewport">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogTitle")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:title">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogDescription")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:description">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogSiteName")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:site_name">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogUrl")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:url">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogType")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:type">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogImage")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:image">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogImageSecure")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:image:secure_url">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogImageType")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:image:type">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogImageAlt")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:image:alt">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogImageWidth")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:image:width">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogImageHeight")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:image:height">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ogLocale")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta property="og:locale">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterTitle")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:title">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterDescription")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:description">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterCard")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:card">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterSite")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:site">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterCreator")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:creator">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterImage")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:image">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"twitterImageAlt")," - ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="twitter:image:alt">')," tag"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"robots")," - function with parameters ",(0,r.kt)("inlineCode",{parentName:"li"},"(type: 'all' | 'noindex' | 'nofollow' | 'none')")," which returns ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="robots" content="none">'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="robots" content="noindex, nofollow">')," or ",(0,r.kt)("inlineCode",{parentName:"li"},'<meta name="robots" content="noarchive">')," tag")),(0,r.kt)("h3",{id:"custom-meta-tags"},"Custom meta tags"),(0,r.kt)("p",null,"If you need to add meta tag which is not in the ",(0,r.kt)("a",{parentName:"p",href:"#meta-tags-list"},"predefined list"),", you need to provide object with specific description:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type CustomTag = {\n  tag: string;\n  attributes?: {\n    [key: string]: any;\n  };\n  innerHtml?: string;\n}\n")),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("h3",{id:"testing-work-with-meta_updater_token-and-meta_default_token"},"Testing work with META_UPDATER_TOKEN and META_DEFAULT_TOKEN"),(0,r.kt)("p",null,"If you have a module or providers that define ",(0,r.kt)("inlineCode",{parentName:"p"},"META_UPDATER_TOKEN")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"META_DEFAULT_TOKEN")," then it is convenient to use special utilities to test them separately:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module, provide } from '@tramvai/core';\nimport { testMetaUpdater } from '@tramvai/module-seo/tests';\nimport { META_PRIORITY_APP, META_DEFAULT_TOKEN, META_UPDATER_TOKEN } from '@tramvai/module-seo';\n\ndescribe('testMetaUpdater', () => {\n  it('modules', async () => {\n    const metaUpdater = jest.fn<\n      ReturnType<typeof META_UPDATER_TOKEN>,\n      Parameters<typeof META_UPDATER_TOKEN>\n    >((walker) => {\n      walker.updateMeta(META_PRIORITY_APP, {\n        title: 'test title',\n      });\n    });\n    @Module({\n      providers: [\n        provide({\n          provide: META_UPDATER_TOKEN,\n          multi: true,\n          useValue: metaUpdater,\n        }),\n      ],\n    })\n    class CustomModule {}\n    const { renderMeta } = testMetaUpdater({\n      modules: [CustomModule],\n    });\n\n    const { render, metaWalk } = renderMeta();\n\n    expect(metaWalk.get('title').value).toBe('test title');\n    expect(render).toMatch('<title data-meta-dynamic=\"true\">test title</title>');\n  });\n\n  it('providers', async () => {\n    const { renderMeta } = testMetaUpdater({\n      providers: [\n        provide({\n          provide: META_DEFAULT_TOKEN,\n          useValue: {\n            title: 'default title',\n          },\n        }),\n      ],\n    });\n\n    const { render } = renderMeta();\n\n    expect(render).toMatch('<title data-meta-dynamic=\"true\">default title</title>');\n  });\n});\n")))}c.isMDXComponent=!0}}]);