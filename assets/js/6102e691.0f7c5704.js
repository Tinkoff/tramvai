"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7707],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,f=u["".concat(s,".").concat(d)]||u[d]||l[d]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var m=2;m<i;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6699:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>m,toc:()=>l});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={},s=void 0,m={unversionedId:"references/tokens/core",id:"references/tokens/core",title:"core",description:"Tramvai core tokens.",source:"@site/tmp-docs/references/tokens/core.md",sourceDirName:"references/tokens",slug:"/references/tokens/core",permalink:"/tramvai/docs/references/tokens/core",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tokens/core.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"cookie",permalink:"/tramvai/docs/references/tokens/cookie"},next:{title:"http-client",permalink:"/tramvai/docs/references/tokens/http-client"}},p={},l=[],u={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tramvai core tokens."),(0,i.kt)("p",null,(0,i.kt)("pre",{parentName:"p"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { Container, Provider, MultiTokenInterface } from '@tinkoff/dippy';\nimport { createToken } from '@tinkoff/dippy';\nimport type { Command } from './command';\nimport type { Action } from './action';\n\nexport * from './action';\nexport * from './command';\nexport * from './bundle';\n\nexport const BUNDLE_LIST_TOKEN = createToken('bundleList');\nexport const ACTIONS_LIST_TOKEN = createToken<Action[]>('actionsList');\nexport const MODULES_LIST_TOKEN = createToken('modulesList');\nexport const APP_INFO_TOKEN = createToken<{ appName: string; [key: string]: string }>('appInfo');\n\nexport interface CommandLine {\n  lines: CommandLines;\n\n  run(\n    type: keyof CommandLines,\n    status: keyof CommandLineDescription,\n    providers?: Provider[],\n    customDi?: Container\n  ): Promise<Container>;\n}\n\nexport type CommandLineDescription = Record<string, MultiTokenInterface<Command>[]>;\n\nexport type CommandLines = {\n  server: CommandLineDescription;\n  client: CommandLineDescription;\n};\n\nexport const COMMAND_LINE_RUNNER_TOKEN = createToken<CommandLine>('commandLineRunner');\nexport const COMMAND_LINES_TOKEN = createToken<CommandLines>('commandLines');\n\nconst multiOptions = { multi: true } as const;\nexport const commandLineListTokens = {\n  // Block: Initializing\n  init: createToken<Command>('init', multiOptions),\n  listen: createToken<Command>('listen', multiOptions),\n\n  // Block: Request handling\n  customerStart: createToken<Command>('customer_start', multiOptions), // Client initialization\n  resolveUserDeps: createToken<Command>('resolve_user_deps', multiOptions), // Get the client data\n  resolvePageDeps: createToken<Command>('resolve_page_deps', multiOptions), // Get the page data\n  generatePage: createToken<Command>('generate_page', multiOptions), // Generate html for the page\n  clear: createToken<Command>('clear', multiOptions), // Cleanup\n\n  // Block: Client navigations\n  spaTransition: createToken<Command>('spa_transition', multiOptions),\n  afterSpaTransition: createToken<Command>('after_spa_transition', multiOptions),\n\n  // Block: Server stop\n  close: createToken<Command>('close', multiOptions),\n};\n\n"))))}d.isMDXComponent=!0}}]);