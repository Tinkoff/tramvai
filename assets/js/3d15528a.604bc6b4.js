"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7492],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return n?i.createElement(g,o(o({ref:t},c),{},{components:n})):i.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"cpu-profiling",title:"CPU profiling"},p=void 0,s={unversionedId:"guides/cpu-profiling",id:"guides/cpu-profiling",title:"CPU profiling",description:"Introduction",source:"@site/tmp-docs/guides/cpu-profiling.md",sourceDirName:"guides",slug:"/guides/cpu-profiling",permalink:"/tramvai/docs/guides/cpu-profiling",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/guides/cpu-profiling.md",tags:[],version:"current",frontMatter:{id:"cpu-profiling",title:"CPU profiling"},sidebar:"sidebar",previous:{title:"Client-side rendering",permalink:"/tramvai/docs/guides/client-side-rendering"},next:{title:"Deployment",permalink:"/tramvai/docs/guides/deploy"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Profiling",id:"profiling",level:2},{value:"Running the application",id:"running-the-application",level:3},{value:"Connecting DevTools",id:"connecting-devtools",level:3},{value:"Profiling methodology",id:"profiling-methodology",level:3},{value:"Results interpretation",id:"results-interpretation",level:3},{value:"Share results",id:"share-results",level:3},{value:"Summary",id:"summary",level:2}],d={toc:u};function m(e){var t=e.components,l=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"CPU-intensive operations have a major impact on Node.js applications stability and response timings. Server-side rendering is exactly such a main CPU-intensive task in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," applications. SSR mainly consists of rendering ",(0,r.kt)("inlineCode",{parentName:"p"},"React")," application to HTML string and in a smaller degree global store initial state serialization, and both of this operations are synhronious."),(0,r.kt)("p",null,"For the most part, it is the rendering time to HTML string that limits the throughput of our application, the actual RPS and directly affects the response timings. Because of that, it is very important to perform load testing and profiling of rendering bottlenecks of our SSR applications. This guide will be focused on profiling, for load testing you can use such a great tools as ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcollina/autocannon"},"autocannon")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grafana/k6"},"k6"),"."),(0,r.kt)("h2",{id:"profiling"},"Profiling"),(0,r.kt)("h3",{id:"running-the-application"},"Running the application"),(0,r.kt)("p",null,"To debug the production version of the application, the ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai start-prod <appName>")," command with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--debug")," flag is used."),(0,r.kt)("p",null,"\u231b Run the application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tramvai start-prod <appName> --debug\n")),(0,r.kt)("p",null,"After finishing the build and running the application, you will see a log like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"Debugger listening on ws://127.0.0.1:9229/356818ba-fa02-4484-82b3-76b1d57bbd7e")),(0,r.kt)("h3",{id:"connecting-devtools"},"Connecting DevTools"),(0,r.kt)("p",null,"\u231b Open ",(0,r.kt)("inlineCode",{parentName:"p"},"chrome://inspect")," url in browser"),(0,r.kt)("p",null,"You will see a tab with connected application:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Chrome inspect tab",src:n(9470).Z,width:"2322",height:"1426"})),(0,r.kt)("p",null,"\u231b Press ",(0,r.kt)("inlineCode",{parentName:"p"},"inspect")," button"),(0,r.kt)("p",null,"The DevTools tab will open:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"DevTools",src:n(8317).Z,width:"2942",height:"1922"})),(0,r.kt)("h3",{id:"profiling-methodology"},"Profiling methodology"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"At first, select specific page for profiling, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo/")," route")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After running the application, it is worth warming up caches for selected page."),(0,r.kt)("p",{parentName:"li"},"\u231b Run ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," once:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:3000/foo/\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then, we need to start profiling."),(0,r.kt)("p",{parentName:"li"},"\u231b Press ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," button in DevTools tab")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After profiling started, send several requests per page, with short intervals."),(0,r.kt)("p",{parentName:"li"},"\u231b Run ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," multiple times:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:3000/foo/\n# wait 2 seconds\ncurl http://localhost:3000/foo/\n# wait 2 seconds\ncurl http://localhost:3000/foo/\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"And we need to finish profiling"),(0,r.kt)("p",{parentName:"li"},"\u231b Press ",(0,r.kt)("inlineCode",{parentName:"p"},"stop")," button in DevTools"))),(0,r.kt)("p",null,"After all steps, you will see a ",(0,r.kt)("strong",{parentName:"p"},"Chart")," with this requests:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"DevTools",src:n(1422).Z,width:"2940",height:"1922"})),(0,r.kt)("h3",{id:"results-interpretation"},"Results interpretation"),(0,r.kt)("p",null,"On a ",(0,r.kt)("strong",{parentName:"p"},"Chart")," diagramm you can easily find heaviest functions calls. In our example, we have synthetically created a heavy ",(0,r.kt)("inlineCode",{parentName:"p"},"React")," component, the rendering time of which took 30ms:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"DevTools",src:n(2937).Z,width:"2942",height:"1926"})),(0,r.kt)("p",null,"This is a really CPU-heavy task, and it's also likely to be much larger in your application than all the other tasks, called per single request."),(0,r.kt)("p",null,"We recommend paying attention to all tasks that run for ",(0,r.kt)("strong",{parentName:"p"},"more than a few milliseconds"),". Such tasks can be easily found in the ",(0,r.kt)("strong",{parentName:"p"},"Heavy")," table by looking at the ",(0,r.kt)("strong",{parentName:"p"},"Self Time")," column:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"DevTools",src:n(2787).Z,width:"2946",height:"1924"})),(0,r.kt)("p",null,"In this example, you can find a lot of internal ",(0,r.kt)("inlineCode",{parentName:"p"},"React")," work, and one internal ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," method call, larger than 2ms - ",(0,r.kt)("inlineCode",{parentName:"p"},"buildPage"),". In the real application, you will definitely see a ",(0,r.kt)("inlineCode",{parentName:"p"},"safeStringify")," method dehydrate near by, responsible for initial state serialization."),(0,r.kt)("h3",{id:"share-results"},"Share results"),(0,r.kt)("p",null,"\u231b Press ",(0,r.kt)("inlineCode",{parentName:"p"},"Save")," button on current CPU profile:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"DevTools",src:n(3619).Z,width:"2946",height:"1924"})),(0,r.kt)("p",null,"\u231b Pack the report in the archive, because it can be very heavy"),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"In this guide we learned the basics of profiling tramvai applications. Each application has its own peculiarities, profiling different pages will give different results. It is important to understand what workloads your application is handling, what response timings you might consider good from the user's point of view, and to profile the rendering performance regularly. Every millisecond saved will have a positive impact on server health under continuous high loads."))}m.isMDXComponent=!0},9470:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/cpu-profile-1-inspect-41c27c28113953e67bf7eefc1ccff7e6.png"},8317:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/cpu-profile-2-devtools-6a04f8be6fba7e48d344967280330317.png"},1422:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/cpu-profile-3-result-chart-all-3d3d7b9ab9170360e53f12760f015ecd.png"},2937:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/cpu-profile-4-result-chart-extend-06749972fcd96b9f688e2ae37d6ad369.png"},2787:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/cpu-profile-5-result-heavy-e753d56283e5606e881e8e237a172332.png"},3619:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/cpu-profile-6-result-chart-save-a5deb21e395fa5f08fa6cf0ac8e426a4.png"}}]);