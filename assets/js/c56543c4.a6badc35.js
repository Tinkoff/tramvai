"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2237],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>c});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(o),c=n,m=u["".concat(s,".").concat(c)]||u[c]||g[c]||a;return o?r.createElement(m,l(l({ref:t},p),{},{components:o})):r.createElement(m,l({ref:t},p))}));function c(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var d=2;d<a;d++)l[d]=o[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},8119:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>g});var r=o(7462),n=o(3366),a=(o(7294),o(3905)),l=["components"],i={id:"how-debug-modules",title:"How to debug modules?"},s=void 0,d={unversionedId:"how-to/how-debug-modules",id:"how-to/how-debug-modules",title:"How to debug modules?",description:"For convenient debugging of modules, it is necessary to enable logger display for unique logger IDs that were created in the modules being debugged. Library documentation @tinkoff/logger contains detailed examples of logger operation.",source:"@site/tmp-docs/how-to/how-debug-modules.md",sourceDirName:"how-to",slug:"/how-to/how-debug-modules",permalink:"/docs/how-to/how-debug-modules",draft:!1,editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/how-to/how-debug-modules.md",tags:[],version:"current",frontMatter:{id:"how-debug-modules",title:"How to debug modules?"},sidebar:"sidebar",previous:{title:"How to create a papi handler?",permalink:"/docs/how-to/how-create-papi"},next:{title:"How to enable modern mode for an application?",permalink:"/docs/how-to/how-enable-modern"}},p={},g=[{value:"Displaying logs on the server",id:"displaying-logs-on-the-server",level:3},{value:"Displaying logs on the browser",id:"displaying-logs-on-the-browser",level:3}],u={toc:g};function c(e){var t=e.components,o=(0,n.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"For convenient debugging of modules, it is necessary to enable logger display for unique logger IDs that were created in the modules being debugged. Library documentation ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/libs/logger"},"@tinkoff/logger")," contains detailed examples of logger operation."),(0,a.kt)("p",null,"It is recommended to specify a list of logger identifiers in the README for each module, otherwise you can look up occurrences on the line ",(0,a.kt)("inlineCode",{parentName:"p"},"logger(")," to find the necessary identifiers."),(0,a.kt)("p",null,"Levels and identifiers of displayed loggers are specified separately for server and for client, by default all loggers with level ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," and above are displayed."),(0,a.kt)("h3",{id:"displaying-logs-on-the-server"},"Displaying logs on the server"),(0,a.kt)("p",null,"The server log settings are set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"LOG_ENABLE")," environment variables, if needed, you can change these settings in runtime, through the papi method ",(0,a.kt)("inlineCode",{parentName:"p"},"/{appName}/private/papi/logger")," with additional query parameters.\nYou can read more about the available parameters in the documentation ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/modules/log"},"@tramvai/module-log")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"LOG_ENABLE='router' // displays all logs for the logger with the ID `router`\n")),(0,a.kt)("h3",{id:"displaying-logs-on-the-browser"},"Displaying logs on the browser"),(0,a.kt)("p",null,"Client logs settings are controlled by methods of the ",(0,a.kt)("inlineCode",{parentName:"p"},"@tinkoff/logger")," library.\nThese settings are stored in the localStorage, so to display all client logs with new settings, you must additionally reload the page, or clear the localStorage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import logger from '@tinkoff/logger';\n\nlogger.enable('router'); // displays all logs for the logger with the ID `router`\n")))}c.isMDXComponent=!0}}]);